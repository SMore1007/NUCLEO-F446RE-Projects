/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */



/*
 * Steps for LED blink
 * *******************************************************************
 * 1) Enable the clock for GPIO in AHB1ENR RCC Register for GPIOA and GPIOC
 *
 * 2) Configure the Mode Register for GPIOA (PA5 in-bult LED)- Set to output
 * 3) Configure the output data register for GPIOA- set to output
 *
 * 4) Configure the Mode Register for GPIOC (PC13 in-bult Button)- Set to input
 * 5) Configure the input data register for GPIOC- set to input
 * ********************************************************************
 *
 * */


// Libraries
#include <stdint.h>

// Function Prototype
void delay(void);  // for delay
void init(void);   // for gpio init

// Base addresses for RCC and GPIOA (Inbuilt LED)
#define RCC_AHB1ENR      ((volatile uint32_t *) 0x40023830)  // RCC AHB1 peripheral clock enable register
#define GPIOA_MODER      ((volatile uint32_t *) 0x40020000)  // GPIOA mode register
#define GPIOA_ODR        ((volatile uint32_t *) 0x40020014)  // GPIOA output data register

// Base addresses for GPIOC (Inbuilt Button)
#define GPIOC_MODER      ((volatile uint32_t *) 0x40020800)  // GPIOC mode register
#define GPIOC_ODR        ((volatile uint32_t *) 0x40020814)  // GPIOC output data register



int main(void)
{
    /* Loop forever */
	for(;;);
}


void init()
{
	*RCC_AHB1ENR = |= (1 << 0); //
}

// Delay generation loop
void delay()
{
	for(uint32_t i = 0; i < 100000; i++)
	{
		// Empty loop for delay
	}
}
