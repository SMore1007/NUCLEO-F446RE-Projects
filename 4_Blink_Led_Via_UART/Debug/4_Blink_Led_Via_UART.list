
4_Blink_Led_Via_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000153c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  0800170c  0800170c  0001170c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017e8  080017e8  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080017e8  080017e8  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080017e8  080017e8  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017e8  080017e8  000117e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080017ec  080017ec  000117ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080017f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000064  08001854  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08001854  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003263  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000893  00000000  00000000  000232f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000178  00000000  00000000  00023b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000130  00000000  00000000  00023d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac00  00000000  00000000  00023e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000027b4  00000000  00000000  0003ea38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000902c6  00000000  00000000  000411ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d14b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000cd0  00000000  00000000  000d1508  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080016f4 	.word	0x080016f4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	080016f4 	.word	0x080016f4

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <main>:

char Newdata[BUFFER_SIZE]; /* Buffer for Input message */
int bufferIndex = 0;        /* Index for filling the buffer */

int main(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
    Uart2_Rx_Tx_init();
 80002d6:	f000 f8f1 	bl	80004bc <Uart2_Rx_Tx_init>
    LED_init();
 80002da:	f000 f995 	bl	8000608 <LED_init>
    while (1)
    {
        // Read a single character from UART
        char receivedChar = Uart2_Read();
 80002de:	f000 f97f 	bl	80005e0 <Uart2_Read>
 80002e2:	4603      	mov	r3, r0
 80002e4:	71fb      	strb	r3, [r7, #7]

        // Check for newline or end-of-message delimiter
        if (receivedChar == '\n' || receivedChar == '\r') // Assuming \n or \r as the delimiter
 80002e6:	79fb      	ldrb	r3, [r7, #7]
 80002e8:	2b0a      	cmp	r3, #10
 80002ea:	d002      	beq.n	80002f2 <main+0x22>
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	2b0d      	cmp	r3, #13
 80002f0:	d120      	bne.n	8000334 <main+0x64>
        {
            Newdata[bufferIndex] = '\0'; // Null-terminate the string
 80002f2:	4b1a      	ldr	r3, [pc, #104]	; (800035c <main+0x8c>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	4a1a      	ldr	r2, [pc, #104]	; (8000360 <main+0x90>)
 80002f8:	2100      	movs	r1, #0
 80002fa:	54d1      	strb	r1, [r2, r3]

            // Compare the received string
            if (strcmp(Newdata, "ON")== 0)
 80002fc:	4919      	ldr	r1, [pc, #100]	; (8000364 <main+0x94>)
 80002fe:	4818      	ldr	r0, [pc, #96]	; (8000360 <main+0x90>)
 8000300:	f7ff ff86 	bl	8000210 <strcmp>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d102      	bne.n	8000310 <main+0x40>
            {
            	LED_On();
 800030a:	f000 f99b 	bl	8000644 <LED_On>
 800030e:	e00d      	b.n	800032c <main+0x5c>
            }
            else if (strcmp(Newdata, "OFF") == 0)
 8000310:	4915      	ldr	r1, [pc, #84]	; (8000368 <main+0x98>)
 8000312:	4813      	ldr	r0, [pc, #76]	; (8000360 <main+0x90>)
 8000314:	f7ff ff7c 	bl	8000210 <strcmp>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d102      	bne.n	8000324 <main+0x54>
            {
            	LED_Off();
 800031e:	f000 f9a3 	bl	8000668 <LED_Off>
 8000322:	e003      	b.n	800032c <main+0x5c>
            }
            else
            {
                printf("Unknown Command: %s\n", Newdata);
 8000324:	490e      	ldr	r1, [pc, #56]	; (8000360 <main+0x90>)
 8000326:	4811      	ldr	r0, [pc, #68]	; (800036c <main+0x9c>)
 8000328:	f000 fa18 	bl	800075c <iprintf>
            }

            // Reset the buffer for the next message
            bufferIndex = 0;
 800032c:	4b0b      	ldr	r3, [pc, #44]	; (800035c <main+0x8c>)
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	e012      	b.n	800035a <main+0x8a>
        }
        else
        {
            // Add the received character to the buffer
            if (bufferIndex < BUFFER_SIZE - 1)
 8000334:	4b09      	ldr	r3, [pc, #36]	; (800035c <main+0x8c>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2b62      	cmp	r3, #98	; 0x62
 800033a:	dc08      	bgt.n	800034e <main+0x7e>
            {
                Newdata[bufferIndex++] = receivedChar;
 800033c:	4b07      	ldr	r3, [pc, #28]	; (800035c <main+0x8c>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	1c5a      	adds	r2, r3, #1
 8000342:	4906      	ldr	r1, [pc, #24]	; (800035c <main+0x8c>)
 8000344:	600a      	str	r2, [r1, #0]
 8000346:	4906      	ldr	r1, [pc, #24]	; (8000360 <main+0x90>)
 8000348:	79fa      	ldrb	r2, [r7, #7]
 800034a:	54ca      	strb	r2, [r1, r3]
 800034c:	e7c7      	b.n	80002de <main+0xe>
            }
            else
            {
                // Handle buffer overflow
                printf("Buffer Overflow\n");
 800034e:	4808      	ldr	r0, [pc, #32]	; (8000370 <main+0xa0>)
 8000350:	f000 fa8a 	bl	8000868 <puts>
                bufferIndex = 0; // Reset buffer
 8000354:	4b01      	ldr	r3, [pc, #4]	; (800035c <main+0x8c>)
 8000356:	2200      	movs	r2, #0
 8000358:	601a      	str	r2, [r3, #0]
    {
 800035a:	e7c0      	b.n	80002de <main+0xe>
 800035c:	20000080 	.word	0x20000080
 8000360:	20000090 	.word	0x20000090
 8000364:	0800170c 	.word	0x0800170c
 8000368:	08001710 	.word	0x08001710
 800036c:	08001714 	.word	0x08001714
 8000370:	0800172c 	.word	0x0800172c

08000374 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b086      	sub	sp, #24
 8000378:	af00      	add	r7, sp, #0
 800037a:	60f8      	str	r0, [r7, #12]
 800037c:	60b9      	str	r1, [r7, #8]
 800037e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000380:	2300      	movs	r3, #0
 8000382:	617b      	str	r3, [r7, #20]
 8000384:	e00a      	b.n	800039c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000386:	f3af 8000 	nop.w
 800038a:	4601      	mov	r1, r0
 800038c:	68bb      	ldr	r3, [r7, #8]
 800038e:	1c5a      	adds	r2, r3, #1
 8000390:	60ba      	str	r2, [r7, #8]
 8000392:	b2ca      	uxtb	r2, r1
 8000394:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000396:	697b      	ldr	r3, [r7, #20]
 8000398:	3301      	adds	r3, #1
 800039a:	617b      	str	r3, [r7, #20]
 800039c:	697a      	ldr	r2, [r7, #20]
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	429a      	cmp	r2, r3
 80003a2:	dbf0      	blt.n	8000386 <_read+0x12>
	}

return len;
 80003a4:	687b      	ldr	r3, [r7, #4]
}
 80003a6:	4618      	mov	r0, r3
 80003a8:	3718      	adds	r7, #24
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}

080003ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003ae:	b580      	push	{r7, lr}
 80003b0:	b086      	sub	sp, #24
 80003b2:	af00      	add	r7, sp, #0
 80003b4:	60f8      	str	r0, [r7, #12]
 80003b6:	60b9      	str	r1, [r7, #8]
 80003b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003ba:	2300      	movs	r3, #0
 80003bc:	617b      	str	r3, [r7, #20]
 80003be:	e009      	b.n	80003d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80003c0:	68bb      	ldr	r3, [r7, #8]
 80003c2:	1c5a      	adds	r2, r3, #1
 80003c4:	60ba      	str	r2, [r7, #8]
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	4618      	mov	r0, r3
 80003ca:	f000 f95f 	bl	800068c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003ce:	697b      	ldr	r3, [r7, #20]
 80003d0:	3301      	adds	r3, #1
 80003d2:	617b      	str	r3, [r7, #20]
 80003d4:	697a      	ldr	r2, [r7, #20]
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	429a      	cmp	r2, r3
 80003da:	dbf1      	blt.n	80003c0 <_write+0x12>
	}
	return len;
 80003dc:	687b      	ldr	r3, [r7, #4]
}
 80003de:	4618      	mov	r0, r3
 80003e0:	3718      	adds	r7, #24
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}

080003e6 <_close>:

int _close(int file)
{
 80003e6:	b480      	push	{r7}
 80003e8:	b083      	sub	sp, #12
 80003ea:	af00      	add	r7, sp, #0
 80003ec:	6078      	str	r0, [r7, #4]
	return -1;
 80003ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80003f2:	4618      	mov	r0, r3
 80003f4:	370c      	adds	r7, #12
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr

080003fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003fe:	b480      	push	{r7}
 8000400:	b083      	sub	sp, #12
 8000402:	af00      	add	r7, sp, #0
 8000404:	6078      	str	r0, [r7, #4]
 8000406:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000408:	683b      	ldr	r3, [r7, #0]
 800040a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800040e:	605a      	str	r2, [r3, #4]
	return 0;
 8000410:	2300      	movs	r3, #0
}
 8000412:	4618      	mov	r0, r3
 8000414:	370c      	adds	r7, #12
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr

0800041e <_isatty>:

int _isatty(int file)
{
 800041e:	b480      	push	{r7}
 8000420:	b083      	sub	sp, #12
 8000422:	af00      	add	r7, sp, #0
 8000424:	6078      	str	r0, [r7, #4]
	return 1;
 8000426:	2301      	movs	r3, #1
}
 8000428:	4618      	mov	r0, r3
 800042a:	370c      	adds	r7, #12
 800042c:	46bd      	mov	sp, r7
 800042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000432:	4770      	bx	lr

08000434 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000434:	b480      	push	{r7}
 8000436:	b085      	sub	sp, #20
 8000438:	af00      	add	r7, sp, #0
 800043a:	60f8      	str	r0, [r7, #12]
 800043c:	60b9      	str	r1, [r7, #8]
 800043e:	607a      	str	r2, [r7, #4]
	return 0;
 8000440:	2300      	movs	r3, #0
}
 8000442:	4618      	mov	r0, r3
 8000444:	3714      	adds	r7, #20
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr
	...

08000450 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b086      	sub	sp, #24
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000458:	4a14      	ldr	r2, [pc, #80]	; (80004ac <_sbrk+0x5c>)
 800045a:	4b15      	ldr	r3, [pc, #84]	; (80004b0 <_sbrk+0x60>)
 800045c:	1ad3      	subs	r3, r2, r3
 800045e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000460:	697b      	ldr	r3, [r7, #20]
 8000462:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000464:	4b13      	ldr	r3, [pc, #76]	; (80004b4 <_sbrk+0x64>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d102      	bne.n	8000472 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800046c:	4b11      	ldr	r3, [pc, #68]	; (80004b4 <_sbrk+0x64>)
 800046e:	4a12      	ldr	r2, [pc, #72]	; (80004b8 <_sbrk+0x68>)
 8000470:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000472:	4b10      	ldr	r3, [pc, #64]	; (80004b4 <_sbrk+0x64>)
 8000474:	681a      	ldr	r2, [r3, #0]
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	4413      	add	r3, r2
 800047a:	693a      	ldr	r2, [r7, #16]
 800047c:	429a      	cmp	r2, r3
 800047e:	d207      	bcs.n	8000490 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000480:	f000 f93a 	bl	80006f8 <__errno>
 8000484:	4603      	mov	r3, r0
 8000486:	220c      	movs	r2, #12
 8000488:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800048a:	f04f 33ff 	mov.w	r3, #4294967295
 800048e:	e009      	b.n	80004a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000490:	4b08      	ldr	r3, [pc, #32]	; (80004b4 <_sbrk+0x64>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000496:	4b07      	ldr	r3, [pc, #28]	; (80004b4 <_sbrk+0x64>)
 8000498:	681a      	ldr	r2, [r3, #0]
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4413      	add	r3, r2
 800049e:	4a05      	ldr	r2, [pc, #20]	; (80004b4 <_sbrk+0x64>)
 80004a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004a2:	68fb      	ldr	r3, [r7, #12]
}
 80004a4:	4618      	mov	r0, r3
 80004a6:	3718      	adds	r7, #24
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	20020000 	.word	0x20020000
 80004b0:	00000400 	.word	0x00000400
 80004b4:	20000084 	.word	0x20000084
 80004b8:	20000108 	.word	0x20000108

080004bc <Uart2_Rx_Tx_init>:
static void Set_Uart_BaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate);
static uint16_t Compute_Uart_Div(uint32_t PeriphClk, uint32_t BaudRate);
int __io_putchar(int ch);

void Uart2_Rx_Tx_init()
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
   /************************UART GPIO pins*************************************************/
    RCC->AHB1ENR    |= (0x1  << 0);      /* Enable the clock access to GPIOA               */
 80004c0:	4b24      	ldr	r3, [pc, #144]	; (8000554 <Uart2_Rx_Tx_init+0x98>)
 80004c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c4:	4a23      	ldr	r2, [pc, #140]	; (8000554 <Uart2_Rx_Tx_init+0x98>)
 80004c6:	f043 0301 	orr.w	r3, r3, #1
 80004ca:	6313      	str	r3, [r2, #48]	; 0x30
    GPIOA->MODER    &= ~(0x3  << 4);     /* Clear the PA2                                  */
 80004cc:	4b22      	ldr	r3, [pc, #136]	; (8000558 <Uart2_Rx_Tx_init+0x9c>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a21      	ldr	r2, [pc, #132]	; (8000558 <Uart2_Rx_Tx_init+0x9c>)
 80004d2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80004d6:	6013      	str	r3, [r2, #0]
    GPIOA->MODER    |= (0x1  << 5);      /* Set the PA2 for Alternate function mode        */
 80004d8:	4b1f      	ldr	r3, [pc, #124]	; (8000558 <Uart2_Rx_Tx_init+0x9c>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a1e      	ldr	r2, [pc, #120]	; (8000558 <Uart2_Rx_Tx_init+0x9c>)
 80004de:	f043 0320 	orr.w	r3, r3, #32
 80004e2:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0]   |= (0X7  << 8);      /* Alternate function type for Ap2 -> AF07 for USART2*/
 80004e4:	4b1c      	ldr	r3, [pc, #112]	; (8000558 <Uart2_Rx_Tx_init+0x9c>)
 80004e6:	6a1b      	ldr	r3, [r3, #32]
 80004e8:	4a1b      	ldr	r2, [pc, #108]	; (8000558 <Uart2_Rx_Tx_init+0x9c>)
 80004ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80004ee:	6213      	str	r3, [r2, #32]

    GPIOA->MODER    &= ~(0x3  << 6);     /* Clear The PA3*/
 80004f0:	4b19      	ldr	r3, [pc, #100]	; (8000558 <Uart2_Rx_Tx_init+0x9c>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a18      	ldr	r2, [pc, #96]	; (8000558 <Uart2_Rx_Tx_init+0x9c>)
 80004f6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80004fa:	6013      	str	r3, [r2, #0]
    GPIOA->MODER    |= (0x1  << 7);      /* Set the PA3 for Alternate function mode        */
 80004fc:	4b16      	ldr	r3, [pc, #88]	; (8000558 <Uart2_Rx_Tx_init+0x9c>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a15      	ldr	r2, [pc, #84]	; (8000558 <Uart2_Rx_Tx_init+0x9c>)
 8000502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000506:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0]   |= (0X7  << 12);     /* Alternate function type for PA3 -> AF07 for USART2*/
 8000508:	4b13      	ldr	r3, [pc, #76]	; (8000558 <Uart2_Rx_Tx_init+0x9c>)
 800050a:	6a1b      	ldr	r3, [r3, #32]
 800050c:	4a12      	ldr	r2, [pc, #72]	; (8000558 <Uart2_Rx_Tx_init+0x9c>)
 800050e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000512:	6213      	str	r3, [r2, #32]

   /*************************UART Module****************************************************/
    RCC->APB1ENR |= (0x1 << 17);                  /* Enable the clock access to USART2     */
 8000514:	4b0f      	ldr	r3, [pc, #60]	; (8000554 <Uart2_Rx_Tx_init+0x98>)
 8000516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000518:	4a0e      	ldr	r2, [pc, #56]	; (8000554 <Uart2_Rx_Tx_init+0x98>)
 800051a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800051e:	6413      	str	r3, [r2, #64]	; 0x40
    Set_Uart_BaudRate(USART2, APB1CLK, BAUDRATE); /* Baud rate set to 115200               */
 8000520:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000524:	490d      	ldr	r1, [pc, #52]	; (800055c <Uart2_Rx_Tx_init+0xa0>)
 8000526:	480e      	ldr	r0, [pc, #56]	; (8000560 <Uart2_Rx_Tx_init+0xa4>)
 8000528:	f000 f81c 	bl	8000564 <Set_Uart_BaudRate>
    USART2->CR1 |=  (0x1 <<  3);                  /* Enable Transmit bit*/
 800052c:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <Uart2_Rx_Tx_init+0xa4>)
 800052e:	68db      	ldr	r3, [r3, #12]
 8000530:	4a0b      	ldr	r2, [pc, #44]	; (8000560 <Uart2_Rx_Tx_init+0xa4>)
 8000532:	f043 0308 	orr.w	r3, r3, #8
 8000536:	60d3      	str	r3, [r2, #12]
    USART2->CR1 |=  (0x1 <<  2);                  /* Enable Receive bit                    */
 8000538:	4b09      	ldr	r3, [pc, #36]	; (8000560 <Uart2_Rx_Tx_init+0xa4>)
 800053a:	68db      	ldr	r3, [r3, #12]
 800053c:	4a08      	ldr	r2, [pc, #32]	; (8000560 <Uart2_Rx_Tx_init+0xa4>)
 800053e:	f043 0304 	orr.w	r3, r3, #4
 8000542:	60d3      	str	r3, [r2, #12]
    USART2->CR1 |=  (0x1 << 13);                  /* Enable the UART                       */
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <Uart2_Rx_Tx_init+0xa4>)
 8000546:	68db      	ldr	r3, [r3, #12]
 8000548:	4a05      	ldr	r2, [pc, #20]	; (8000560 <Uart2_Rx_Tx_init+0xa4>)
 800054a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800054e:	60d3      	str	r3, [r2, #12]
   /****************************************************************************************/
}
 8000550:	bf00      	nop
 8000552:	bd80      	pop	{r7, pc}
 8000554:	40023800 	.word	0x40023800
 8000558:	40020000 	.word	0x40020000
 800055c:	00f42400 	.word	0x00f42400
 8000560:	40004400 	.word	0x40004400

08000564 <Set_Uart_BaudRate>:
   /***************************************************************************************/
}

/********************* Function to set the baud rate **************************************/
static void Set_Uart_BaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	60f8      	str	r0, [r7, #12]
 800056c:	60b9      	str	r1, [r7, #8]
 800056e:	607a      	str	r2, [r7, #4]
    USARTx->BRR = Compute_Uart_Div(PeriphClk, BaudRate);
 8000570:	6879      	ldr	r1, [r7, #4]
 8000572:	68b8      	ldr	r0, [r7, #8]
 8000574:	f000 f808 	bl	8000588 <Compute_Uart_Div>
 8000578:	4603      	mov	r3, r0
 800057a:	461a      	mov	r2, r3
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	609a      	str	r2, [r3, #8]
}
 8000580:	bf00      	nop
 8000582:	3710      	adds	r7, #16
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}

08000588 <Compute_Uart_Div>:

/********************* Function to calculate the baud rate *********************************/
static uint16_t Compute_Uart_Div(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	6039      	str	r1, [r7, #0]
    return (PeriphClk + (BaudRate / 2U)) / BaudRate; /* Baud Rate Calculation  */
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	085a      	lsrs	r2, r3, #1
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	441a      	add	r2, r3
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	fbb2 f3f3 	udiv	r3, r2, r3
 80005a0:	b29b      	uxth	r3, r3
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
	...

080005b0 <Uart2_Write>:

void Uart2_Write(int ch)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
    while(!(USART2->SR & (0x1 << 7))){}     /* Make sure the transmit data register is empty*/
 80005b8:	bf00      	nop
 80005ba:	4b08      	ldr	r3, [pc, #32]	; (80005dc <Uart2_Write+0x2c>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d0f9      	beq.n	80005ba <Uart2_Write+0xa>
    USART2->DR = (ch & 0xFF);               /* Write to transmit data register              */
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4a04      	ldr	r2, [pc, #16]	; (80005dc <Uart2_Write+0x2c>)
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	6053      	str	r3, [r2, #4]
}
 80005ce:	bf00      	nop
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	40004400 	.word	0x40004400

080005e0 <Uart2_Read>:

char Uart2_Read(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
    while(!(USART2->SR & (0x1 << 5))){}     /* Make sure the Receive data register is not empty*/
 80005e4:	bf00      	nop
 80005e6:	4b07      	ldr	r3, [pc, #28]	; (8000604 <Uart2_Read+0x24>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	f003 0320 	and.w	r3, r3, #32
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d0f9      	beq.n	80005e6 <Uart2_Read+0x6>
    return USART2->DR;                             /* Read the Data                                   */
 80005f2:	4b04      	ldr	r3, [pc, #16]	; (8000604 <Uart2_Read+0x24>)
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	b2db      	uxtb	r3, r3

}
 80005f8:	4618      	mov	r0, r3
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	40004400 	.word	0x40004400

08000608 <LED_init>:

void LED_init(void)  /*Blink inbult led on PA5*/
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
	/* 1. We had enabled clock for GPIOA in Uart2_init() function */
	RCC->AHB1ENR    |= (0x1  << 0);
 800060c:	4b0b      	ldr	r3, [pc, #44]	; (800063c <LED_init+0x34>)
 800060e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000610:	4a0a      	ldr	r2, [pc, #40]	; (800063c <LED_init+0x34>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6313      	str	r3, [r2, #48]	; 0x30
	/* 2. Clear the PA5 pin in mode reg*/
	GPIOA->MODER &= ~(0x3 << 10);
 8000618:	4b09      	ldr	r3, [pc, #36]	; (8000640 <LED_init+0x38>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a08      	ldr	r2, [pc, #32]	; (8000640 <LED_init+0x38>)
 800061e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000622:	6013      	str	r3, [r2, #0]
	/* 3. Set the mode of PA5 as output type */
	GPIOA->MODER |= (0x1 << 10);
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <LED_init+0x38>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a05      	ldr	r2, [pc, #20]	; (8000640 <LED_init+0x38>)
 800062a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800062e:	6013      	str	r3, [r2, #0]
}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	40023800 	.word	0x40023800
 8000640:	40020000 	.word	0x40020000

08000644 <LED_On>:
void LED_On(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	GPIOA->ODR |= (0x1 << 5); // Turn On the LED
 8000648:	4b05      	ldr	r3, [pc, #20]	; (8000660 <LED_On+0x1c>)
 800064a:	695b      	ldr	r3, [r3, #20]
 800064c:	4a04      	ldr	r2, [pc, #16]	; (8000660 <LED_On+0x1c>)
 800064e:	f043 0320 	orr.w	r3, r3, #32
 8000652:	6153      	str	r3, [r2, #20]
	printf("Led: ON\n");
 8000654:	4803      	ldr	r0, [pc, #12]	; (8000664 <LED_On+0x20>)
 8000656:	f000 f907 	bl	8000868 <puts>

}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40020000 	.word	0x40020000
 8000664:	0800173c 	.word	0x0800173c

08000668 <LED_Off>:
void LED_Off(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	GPIOA->ODR &= ~(0x1 << 5); // Turn Off the LED
 800066c:	4b05      	ldr	r3, [pc, #20]	; (8000684 <LED_Off+0x1c>)
 800066e:	695b      	ldr	r3, [r3, #20]
 8000670:	4a04      	ldr	r2, [pc, #16]	; (8000684 <LED_Off+0x1c>)
 8000672:	f023 0320 	bic.w	r3, r3, #32
 8000676:	6153      	str	r3, [r2, #20]
	printf("Led: OFF\n");
 8000678:	4803      	ldr	r0, [pc, #12]	; (8000688 <LED_Off+0x20>)
 800067a:	f000 f8f5 	bl	8000868 <puts>
}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40020000 	.word	0x40020000
 8000688:	08001744 	.word	0x08001744

0800068c <__io_putchar>:
/* Printf function */
int __io_putchar(int ch)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
    Uart2_Write(ch);
 8000694:	6878      	ldr	r0, [r7, #4]
 8000696:	f7ff ff8b 	bl	80005b0 <Uart2_Write>
    return ch;
 800069a:	687b      	ldr	r3, [r7, #4]
}
 800069c:	4618      	mov	r0, r3
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006a4:	480d      	ldr	r0, [pc, #52]	; (80006dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006a6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006a8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006ac:	480c      	ldr	r0, [pc, #48]	; (80006e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80006ae:	490d      	ldr	r1, [pc, #52]	; (80006e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006b0:	4a0d      	ldr	r2, [pc, #52]	; (80006e8 <LoopForever+0xe>)
  movs r3, #0
 80006b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b4:	e002      	b.n	80006bc <LoopCopyDataInit>

080006b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ba:	3304      	adds	r3, #4

080006bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c0:	d3f9      	bcc.n	80006b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006c2:	4a0a      	ldr	r2, [pc, #40]	; (80006ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80006c4:	4c0a      	ldr	r4, [pc, #40]	; (80006f0 <LoopForever+0x16>)
  movs r3, #0
 80006c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c8:	e001      	b.n	80006ce <LoopFillZerobss>

080006ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006cc:	3204      	adds	r2, #4

080006ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d0:	d3fb      	bcc.n	80006ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006d2:	f000 f817 	bl	8000704 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006d6:	f7ff fdfb 	bl	80002d0 <main>

080006da <LoopForever>:

LoopForever:
    b LoopForever
 80006da:	e7fe      	b.n	80006da <LoopForever>
  ldr   r0, =_estack
 80006dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80006e8:	080017f0 	.word	0x080017f0
  ldr r2, =_sbss
 80006ec:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80006f0:	20000104 	.word	0x20000104

080006f4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006f4:	e7fe      	b.n	80006f4 <ADC_IRQHandler>
	...

080006f8 <__errno>:
 80006f8:	4b01      	ldr	r3, [pc, #4]	; (8000700 <__errno+0x8>)
 80006fa:	6818      	ldr	r0, [r3, #0]
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	20000000 	.word	0x20000000

08000704 <__libc_init_array>:
 8000704:	b570      	push	{r4, r5, r6, lr}
 8000706:	4d0d      	ldr	r5, [pc, #52]	; (800073c <__libc_init_array+0x38>)
 8000708:	4c0d      	ldr	r4, [pc, #52]	; (8000740 <__libc_init_array+0x3c>)
 800070a:	1b64      	subs	r4, r4, r5
 800070c:	10a4      	asrs	r4, r4, #2
 800070e:	2600      	movs	r6, #0
 8000710:	42a6      	cmp	r6, r4
 8000712:	d109      	bne.n	8000728 <__libc_init_array+0x24>
 8000714:	4d0b      	ldr	r5, [pc, #44]	; (8000744 <__libc_init_array+0x40>)
 8000716:	4c0c      	ldr	r4, [pc, #48]	; (8000748 <__libc_init_array+0x44>)
 8000718:	f000 ffec 	bl	80016f4 <_init>
 800071c:	1b64      	subs	r4, r4, r5
 800071e:	10a4      	asrs	r4, r4, #2
 8000720:	2600      	movs	r6, #0
 8000722:	42a6      	cmp	r6, r4
 8000724:	d105      	bne.n	8000732 <__libc_init_array+0x2e>
 8000726:	bd70      	pop	{r4, r5, r6, pc}
 8000728:	f855 3b04 	ldr.w	r3, [r5], #4
 800072c:	4798      	blx	r3
 800072e:	3601      	adds	r6, #1
 8000730:	e7ee      	b.n	8000710 <__libc_init_array+0xc>
 8000732:	f855 3b04 	ldr.w	r3, [r5], #4
 8000736:	4798      	blx	r3
 8000738:	3601      	adds	r6, #1
 800073a:	e7f2      	b.n	8000722 <__libc_init_array+0x1e>
 800073c:	080017e8 	.word	0x080017e8
 8000740:	080017e8 	.word	0x080017e8
 8000744:	080017e8 	.word	0x080017e8
 8000748:	080017ec 	.word	0x080017ec

0800074c <memset>:
 800074c:	4402      	add	r2, r0
 800074e:	4603      	mov	r3, r0
 8000750:	4293      	cmp	r3, r2
 8000752:	d100      	bne.n	8000756 <memset+0xa>
 8000754:	4770      	bx	lr
 8000756:	f803 1b01 	strb.w	r1, [r3], #1
 800075a:	e7f9      	b.n	8000750 <memset+0x4>

0800075c <iprintf>:
 800075c:	b40f      	push	{r0, r1, r2, r3}
 800075e:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <iprintf+0x2c>)
 8000760:	b513      	push	{r0, r1, r4, lr}
 8000762:	681c      	ldr	r4, [r3, #0]
 8000764:	b124      	cbz	r4, 8000770 <iprintf+0x14>
 8000766:	69a3      	ldr	r3, [r4, #24]
 8000768:	b913      	cbnz	r3, 8000770 <iprintf+0x14>
 800076a:	4620      	mov	r0, r4
 800076c:	f000 fa5e 	bl	8000c2c <__sinit>
 8000770:	ab05      	add	r3, sp, #20
 8000772:	9a04      	ldr	r2, [sp, #16]
 8000774:	68a1      	ldr	r1, [r4, #8]
 8000776:	9301      	str	r3, [sp, #4]
 8000778:	4620      	mov	r0, r4
 800077a:	f000 fc2f 	bl	8000fdc <_vfiprintf_r>
 800077e:	b002      	add	sp, #8
 8000780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000784:	b004      	add	sp, #16
 8000786:	4770      	bx	lr
 8000788:	20000000 	.word	0x20000000

0800078c <_puts_r>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	460e      	mov	r6, r1
 8000790:	4605      	mov	r5, r0
 8000792:	b118      	cbz	r0, 800079c <_puts_r+0x10>
 8000794:	6983      	ldr	r3, [r0, #24]
 8000796:	b90b      	cbnz	r3, 800079c <_puts_r+0x10>
 8000798:	f000 fa48 	bl	8000c2c <__sinit>
 800079c:	69ab      	ldr	r3, [r5, #24]
 800079e:	68ac      	ldr	r4, [r5, #8]
 80007a0:	b913      	cbnz	r3, 80007a8 <_puts_r+0x1c>
 80007a2:	4628      	mov	r0, r5
 80007a4:	f000 fa42 	bl	8000c2c <__sinit>
 80007a8:	4b2c      	ldr	r3, [pc, #176]	; (800085c <_puts_r+0xd0>)
 80007aa:	429c      	cmp	r4, r3
 80007ac:	d120      	bne.n	80007f0 <_puts_r+0x64>
 80007ae:	686c      	ldr	r4, [r5, #4]
 80007b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80007b2:	07db      	lsls	r3, r3, #31
 80007b4:	d405      	bmi.n	80007c2 <_puts_r+0x36>
 80007b6:	89a3      	ldrh	r3, [r4, #12]
 80007b8:	0598      	lsls	r0, r3, #22
 80007ba:	d402      	bmi.n	80007c2 <_puts_r+0x36>
 80007bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80007be:	f000 fad3 	bl	8000d68 <__retarget_lock_acquire_recursive>
 80007c2:	89a3      	ldrh	r3, [r4, #12]
 80007c4:	0719      	lsls	r1, r3, #28
 80007c6:	d51d      	bpl.n	8000804 <_puts_r+0x78>
 80007c8:	6923      	ldr	r3, [r4, #16]
 80007ca:	b1db      	cbz	r3, 8000804 <_puts_r+0x78>
 80007cc:	3e01      	subs	r6, #1
 80007ce:	68a3      	ldr	r3, [r4, #8]
 80007d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80007d4:	3b01      	subs	r3, #1
 80007d6:	60a3      	str	r3, [r4, #8]
 80007d8:	bb39      	cbnz	r1, 800082a <_puts_r+0x9e>
 80007da:	2b00      	cmp	r3, #0
 80007dc:	da38      	bge.n	8000850 <_puts_r+0xc4>
 80007de:	4622      	mov	r2, r4
 80007e0:	210a      	movs	r1, #10
 80007e2:	4628      	mov	r0, r5
 80007e4:	f000 f848 	bl	8000878 <__swbuf_r>
 80007e8:	3001      	adds	r0, #1
 80007ea:	d011      	beq.n	8000810 <_puts_r+0x84>
 80007ec:	250a      	movs	r5, #10
 80007ee:	e011      	b.n	8000814 <_puts_r+0x88>
 80007f0:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <_puts_r+0xd4>)
 80007f2:	429c      	cmp	r4, r3
 80007f4:	d101      	bne.n	80007fa <_puts_r+0x6e>
 80007f6:	68ac      	ldr	r4, [r5, #8]
 80007f8:	e7da      	b.n	80007b0 <_puts_r+0x24>
 80007fa:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <_puts_r+0xd8>)
 80007fc:	429c      	cmp	r4, r3
 80007fe:	bf08      	it	eq
 8000800:	68ec      	ldreq	r4, [r5, #12]
 8000802:	e7d5      	b.n	80007b0 <_puts_r+0x24>
 8000804:	4621      	mov	r1, r4
 8000806:	4628      	mov	r0, r5
 8000808:	f000 f888 	bl	800091c <__swsetup_r>
 800080c:	2800      	cmp	r0, #0
 800080e:	d0dd      	beq.n	80007cc <_puts_r+0x40>
 8000810:	f04f 35ff 	mov.w	r5, #4294967295
 8000814:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000816:	07da      	lsls	r2, r3, #31
 8000818:	d405      	bmi.n	8000826 <_puts_r+0x9a>
 800081a:	89a3      	ldrh	r3, [r4, #12]
 800081c:	059b      	lsls	r3, r3, #22
 800081e:	d402      	bmi.n	8000826 <_puts_r+0x9a>
 8000820:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000822:	f000 faa2 	bl	8000d6a <__retarget_lock_release_recursive>
 8000826:	4628      	mov	r0, r5
 8000828:	bd70      	pop	{r4, r5, r6, pc}
 800082a:	2b00      	cmp	r3, #0
 800082c:	da04      	bge.n	8000838 <_puts_r+0xac>
 800082e:	69a2      	ldr	r2, [r4, #24]
 8000830:	429a      	cmp	r2, r3
 8000832:	dc06      	bgt.n	8000842 <_puts_r+0xb6>
 8000834:	290a      	cmp	r1, #10
 8000836:	d004      	beq.n	8000842 <_puts_r+0xb6>
 8000838:	6823      	ldr	r3, [r4, #0]
 800083a:	1c5a      	adds	r2, r3, #1
 800083c:	6022      	str	r2, [r4, #0]
 800083e:	7019      	strb	r1, [r3, #0]
 8000840:	e7c5      	b.n	80007ce <_puts_r+0x42>
 8000842:	4622      	mov	r2, r4
 8000844:	4628      	mov	r0, r5
 8000846:	f000 f817 	bl	8000878 <__swbuf_r>
 800084a:	3001      	adds	r0, #1
 800084c:	d1bf      	bne.n	80007ce <_puts_r+0x42>
 800084e:	e7df      	b.n	8000810 <_puts_r+0x84>
 8000850:	6823      	ldr	r3, [r4, #0]
 8000852:	250a      	movs	r5, #10
 8000854:	1c5a      	adds	r2, r3, #1
 8000856:	6022      	str	r2, [r4, #0]
 8000858:	701d      	strb	r5, [r3, #0]
 800085a:	e7db      	b.n	8000814 <_puts_r+0x88>
 800085c:	08001774 	.word	0x08001774
 8000860:	08001794 	.word	0x08001794
 8000864:	08001754 	.word	0x08001754

08000868 <puts>:
 8000868:	4b02      	ldr	r3, [pc, #8]	; (8000874 <puts+0xc>)
 800086a:	4601      	mov	r1, r0
 800086c:	6818      	ldr	r0, [r3, #0]
 800086e:	f7ff bf8d 	b.w	800078c <_puts_r>
 8000872:	bf00      	nop
 8000874:	20000000 	.word	0x20000000

08000878 <__swbuf_r>:
 8000878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800087a:	460e      	mov	r6, r1
 800087c:	4614      	mov	r4, r2
 800087e:	4605      	mov	r5, r0
 8000880:	b118      	cbz	r0, 800088a <__swbuf_r+0x12>
 8000882:	6983      	ldr	r3, [r0, #24]
 8000884:	b90b      	cbnz	r3, 800088a <__swbuf_r+0x12>
 8000886:	f000 f9d1 	bl	8000c2c <__sinit>
 800088a:	4b21      	ldr	r3, [pc, #132]	; (8000910 <__swbuf_r+0x98>)
 800088c:	429c      	cmp	r4, r3
 800088e:	d12b      	bne.n	80008e8 <__swbuf_r+0x70>
 8000890:	686c      	ldr	r4, [r5, #4]
 8000892:	69a3      	ldr	r3, [r4, #24]
 8000894:	60a3      	str	r3, [r4, #8]
 8000896:	89a3      	ldrh	r3, [r4, #12]
 8000898:	071a      	lsls	r2, r3, #28
 800089a:	d52f      	bpl.n	80008fc <__swbuf_r+0x84>
 800089c:	6923      	ldr	r3, [r4, #16]
 800089e:	b36b      	cbz	r3, 80008fc <__swbuf_r+0x84>
 80008a0:	6923      	ldr	r3, [r4, #16]
 80008a2:	6820      	ldr	r0, [r4, #0]
 80008a4:	1ac0      	subs	r0, r0, r3
 80008a6:	6963      	ldr	r3, [r4, #20]
 80008a8:	b2f6      	uxtb	r6, r6
 80008aa:	4283      	cmp	r3, r0
 80008ac:	4637      	mov	r7, r6
 80008ae:	dc04      	bgt.n	80008ba <__swbuf_r+0x42>
 80008b0:	4621      	mov	r1, r4
 80008b2:	4628      	mov	r0, r5
 80008b4:	f000 f926 	bl	8000b04 <_fflush_r>
 80008b8:	bb30      	cbnz	r0, 8000908 <__swbuf_r+0x90>
 80008ba:	68a3      	ldr	r3, [r4, #8]
 80008bc:	3b01      	subs	r3, #1
 80008be:	60a3      	str	r3, [r4, #8]
 80008c0:	6823      	ldr	r3, [r4, #0]
 80008c2:	1c5a      	adds	r2, r3, #1
 80008c4:	6022      	str	r2, [r4, #0]
 80008c6:	701e      	strb	r6, [r3, #0]
 80008c8:	6963      	ldr	r3, [r4, #20]
 80008ca:	3001      	adds	r0, #1
 80008cc:	4283      	cmp	r3, r0
 80008ce:	d004      	beq.n	80008da <__swbuf_r+0x62>
 80008d0:	89a3      	ldrh	r3, [r4, #12]
 80008d2:	07db      	lsls	r3, r3, #31
 80008d4:	d506      	bpl.n	80008e4 <__swbuf_r+0x6c>
 80008d6:	2e0a      	cmp	r6, #10
 80008d8:	d104      	bne.n	80008e4 <__swbuf_r+0x6c>
 80008da:	4621      	mov	r1, r4
 80008dc:	4628      	mov	r0, r5
 80008de:	f000 f911 	bl	8000b04 <_fflush_r>
 80008e2:	b988      	cbnz	r0, 8000908 <__swbuf_r+0x90>
 80008e4:	4638      	mov	r0, r7
 80008e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008e8:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <__swbuf_r+0x9c>)
 80008ea:	429c      	cmp	r4, r3
 80008ec:	d101      	bne.n	80008f2 <__swbuf_r+0x7a>
 80008ee:	68ac      	ldr	r4, [r5, #8]
 80008f0:	e7cf      	b.n	8000892 <__swbuf_r+0x1a>
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <__swbuf_r+0xa0>)
 80008f4:	429c      	cmp	r4, r3
 80008f6:	bf08      	it	eq
 80008f8:	68ec      	ldreq	r4, [r5, #12]
 80008fa:	e7ca      	b.n	8000892 <__swbuf_r+0x1a>
 80008fc:	4621      	mov	r1, r4
 80008fe:	4628      	mov	r0, r5
 8000900:	f000 f80c 	bl	800091c <__swsetup_r>
 8000904:	2800      	cmp	r0, #0
 8000906:	d0cb      	beq.n	80008a0 <__swbuf_r+0x28>
 8000908:	f04f 37ff 	mov.w	r7, #4294967295
 800090c:	e7ea      	b.n	80008e4 <__swbuf_r+0x6c>
 800090e:	bf00      	nop
 8000910:	08001774 	.word	0x08001774
 8000914:	08001794 	.word	0x08001794
 8000918:	08001754 	.word	0x08001754

0800091c <__swsetup_r>:
 800091c:	4b32      	ldr	r3, [pc, #200]	; (80009e8 <__swsetup_r+0xcc>)
 800091e:	b570      	push	{r4, r5, r6, lr}
 8000920:	681d      	ldr	r5, [r3, #0]
 8000922:	4606      	mov	r6, r0
 8000924:	460c      	mov	r4, r1
 8000926:	b125      	cbz	r5, 8000932 <__swsetup_r+0x16>
 8000928:	69ab      	ldr	r3, [r5, #24]
 800092a:	b913      	cbnz	r3, 8000932 <__swsetup_r+0x16>
 800092c:	4628      	mov	r0, r5
 800092e:	f000 f97d 	bl	8000c2c <__sinit>
 8000932:	4b2e      	ldr	r3, [pc, #184]	; (80009ec <__swsetup_r+0xd0>)
 8000934:	429c      	cmp	r4, r3
 8000936:	d10f      	bne.n	8000958 <__swsetup_r+0x3c>
 8000938:	686c      	ldr	r4, [r5, #4]
 800093a:	89a3      	ldrh	r3, [r4, #12]
 800093c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000940:	0719      	lsls	r1, r3, #28
 8000942:	d42c      	bmi.n	800099e <__swsetup_r+0x82>
 8000944:	06dd      	lsls	r5, r3, #27
 8000946:	d411      	bmi.n	800096c <__swsetup_r+0x50>
 8000948:	2309      	movs	r3, #9
 800094a:	6033      	str	r3, [r6, #0]
 800094c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000950:	81a3      	strh	r3, [r4, #12]
 8000952:	f04f 30ff 	mov.w	r0, #4294967295
 8000956:	e03e      	b.n	80009d6 <__swsetup_r+0xba>
 8000958:	4b25      	ldr	r3, [pc, #148]	; (80009f0 <__swsetup_r+0xd4>)
 800095a:	429c      	cmp	r4, r3
 800095c:	d101      	bne.n	8000962 <__swsetup_r+0x46>
 800095e:	68ac      	ldr	r4, [r5, #8]
 8000960:	e7eb      	b.n	800093a <__swsetup_r+0x1e>
 8000962:	4b24      	ldr	r3, [pc, #144]	; (80009f4 <__swsetup_r+0xd8>)
 8000964:	429c      	cmp	r4, r3
 8000966:	bf08      	it	eq
 8000968:	68ec      	ldreq	r4, [r5, #12]
 800096a:	e7e6      	b.n	800093a <__swsetup_r+0x1e>
 800096c:	0758      	lsls	r0, r3, #29
 800096e:	d512      	bpl.n	8000996 <__swsetup_r+0x7a>
 8000970:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000972:	b141      	cbz	r1, 8000986 <__swsetup_r+0x6a>
 8000974:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000978:	4299      	cmp	r1, r3
 800097a:	d002      	beq.n	8000982 <__swsetup_r+0x66>
 800097c:	4630      	mov	r0, r6
 800097e:	f000 fa59 	bl	8000e34 <_free_r>
 8000982:	2300      	movs	r3, #0
 8000984:	6363      	str	r3, [r4, #52]	; 0x34
 8000986:	89a3      	ldrh	r3, [r4, #12]
 8000988:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800098c:	81a3      	strh	r3, [r4, #12]
 800098e:	2300      	movs	r3, #0
 8000990:	6063      	str	r3, [r4, #4]
 8000992:	6923      	ldr	r3, [r4, #16]
 8000994:	6023      	str	r3, [r4, #0]
 8000996:	89a3      	ldrh	r3, [r4, #12]
 8000998:	f043 0308 	orr.w	r3, r3, #8
 800099c:	81a3      	strh	r3, [r4, #12]
 800099e:	6923      	ldr	r3, [r4, #16]
 80009a0:	b94b      	cbnz	r3, 80009b6 <__swsetup_r+0x9a>
 80009a2:	89a3      	ldrh	r3, [r4, #12]
 80009a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80009a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009ac:	d003      	beq.n	80009b6 <__swsetup_r+0x9a>
 80009ae:	4621      	mov	r1, r4
 80009b0:	4630      	mov	r0, r6
 80009b2:	f000 f9ff 	bl	8000db4 <__smakebuf_r>
 80009b6:	89a0      	ldrh	r0, [r4, #12]
 80009b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80009bc:	f010 0301 	ands.w	r3, r0, #1
 80009c0:	d00a      	beq.n	80009d8 <__swsetup_r+0xbc>
 80009c2:	2300      	movs	r3, #0
 80009c4:	60a3      	str	r3, [r4, #8]
 80009c6:	6963      	ldr	r3, [r4, #20]
 80009c8:	425b      	negs	r3, r3
 80009ca:	61a3      	str	r3, [r4, #24]
 80009cc:	6923      	ldr	r3, [r4, #16]
 80009ce:	b943      	cbnz	r3, 80009e2 <__swsetup_r+0xc6>
 80009d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80009d4:	d1ba      	bne.n	800094c <__swsetup_r+0x30>
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	0781      	lsls	r1, r0, #30
 80009da:	bf58      	it	pl
 80009dc:	6963      	ldrpl	r3, [r4, #20]
 80009de:	60a3      	str	r3, [r4, #8]
 80009e0:	e7f4      	b.n	80009cc <__swsetup_r+0xb0>
 80009e2:	2000      	movs	r0, #0
 80009e4:	e7f7      	b.n	80009d6 <__swsetup_r+0xba>
 80009e6:	bf00      	nop
 80009e8:	20000000 	.word	0x20000000
 80009ec:	08001774 	.word	0x08001774
 80009f0:	08001794 	.word	0x08001794
 80009f4:	08001754 	.word	0x08001754

080009f8 <__sflush_r>:
 80009f8:	898a      	ldrh	r2, [r1, #12]
 80009fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009fe:	4605      	mov	r5, r0
 8000a00:	0710      	lsls	r0, r2, #28
 8000a02:	460c      	mov	r4, r1
 8000a04:	d458      	bmi.n	8000ab8 <__sflush_r+0xc0>
 8000a06:	684b      	ldr	r3, [r1, #4]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	dc05      	bgt.n	8000a18 <__sflush_r+0x20>
 8000a0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	dc02      	bgt.n	8000a18 <__sflush_r+0x20>
 8000a12:	2000      	movs	r0, #0
 8000a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000a1a:	2e00      	cmp	r6, #0
 8000a1c:	d0f9      	beq.n	8000a12 <__sflush_r+0x1a>
 8000a1e:	2300      	movs	r3, #0
 8000a20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000a24:	682f      	ldr	r7, [r5, #0]
 8000a26:	602b      	str	r3, [r5, #0]
 8000a28:	d032      	beq.n	8000a90 <__sflush_r+0x98>
 8000a2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000a2c:	89a3      	ldrh	r3, [r4, #12]
 8000a2e:	075a      	lsls	r2, r3, #29
 8000a30:	d505      	bpl.n	8000a3e <__sflush_r+0x46>
 8000a32:	6863      	ldr	r3, [r4, #4]
 8000a34:	1ac0      	subs	r0, r0, r3
 8000a36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000a38:	b10b      	cbz	r3, 8000a3e <__sflush_r+0x46>
 8000a3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a3c:	1ac0      	subs	r0, r0, r3
 8000a3e:	2300      	movs	r3, #0
 8000a40:	4602      	mov	r2, r0
 8000a42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000a44:	6a21      	ldr	r1, [r4, #32]
 8000a46:	4628      	mov	r0, r5
 8000a48:	47b0      	blx	r6
 8000a4a:	1c43      	adds	r3, r0, #1
 8000a4c:	89a3      	ldrh	r3, [r4, #12]
 8000a4e:	d106      	bne.n	8000a5e <__sflush_r+0x66>
 8000a50:	6829      	ldr	r1, [r5, #0]
 8000a52:	291d      	cmp	r1, #29
 8000a54:	d82c      	bhi.n	8000ab0 <__sflush_r+0xb8>
 8000a56:	4a2a      	ldr	r2, [pc, #168]	; (8000b00 <__sflush_r+0x108>)
 8000a58:	40ca      	lsrs	r2, r1
 8000a5a:	07d6      	lsls	r6, r2, #31
 8000a5c:	d528      	bpl.n	8000ab0 <__sflush_r+0xb8>
 8000a5e:	2200      	movs	r2, #0
 8000a60:	6062      	str	r2, [r4, #4]
 8000a62:	04d9      	lsls	r1, r3, #19
 8000a64:	6922      	ldr	r2, [r4, #16]
 8000a66:	6022      	str	r2, [r4, #0]
 8000a68:	d504      	bpl.n	8000a74 <__sflush_r+0x7c>
 8000a6a:	1c42      	adds	r2, r0, #1
 8000a6c:	d101      	bne.n	8000a72 <__sflush_r+0x7a>
 8000a6e:	682b      	ldr	r3, [r5, #0]
 8000a70:	b903      	cbnz	r3, 8000a74 <__sflush_r+0x7c>
 8000a72:	6560      	str	r0, [r4, #84]	; 0x54
 8000a74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000a76:	602f      	str	r7, [r5, #0]
 8000a78:	2900      	cmp	r1, #0
 8000a7a:	d0ca      	beq.n	8000a12 <__sflush_r+0x1a>
 8000a7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000a80:	4299      	cmp	r1, r3
 8000a82:	d002      	beq.n	8000a8a <__sflush_r+0x92>
 8000a84:	4628      	mov	r0, r5
 8000a86:	f000 f9d5 	bl	8000e34 <_free_r>
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	6360      	str	r0, [r4, #52]	; 0x34
 8000a8e:	e7c1      	b.n	8000a14 <__sflush_r+0x1c>
 8000a90:	6a21      	ldr	r1, [r4, #32]
 8000a92:	2301      	movs	r3, #1
 8000a94:	4628      	mov	r0, r5
 8000a96:	47b0      	blx	r6
 8000a98:	1c41      	adds	r1, r0, #1
 8000a9a:	d1c7      	bne.n	8000a2c <__sflush_r+0x34>
 8000a9c:	682b      	ldr	r3, [r5, #0]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d0c4      	beq.n	8000a2c <__sflush_r+0x34>
 8000aa2:	2b1d      	cmp	r3, #29
 8000aa4:	d001      	beq.n	8000aaa <__sflush_r+0xb2>
 8000aa6:	2b16      	cmp	r3, #22
 8000aa8:	d101      	bne.n	8000aae <__sflush_r+0xb6>
 8000aaa:	602f      	str	r7, [r5, #0]
 8000aac:	e7b1      	b.n	8000a12 <__sflush_r+0x1a>
 8000aae:	89a3      	ldrh	r3, [r4, #12]
 8000ab0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ab4:	81a3      	strh	r3, [r4, #12]
 8000ab6:	e7ad      	b.n	8000a14 <__sflush_r+0x1c>
 8000ab8:	690f      	ldr	r7, [r1, #16]
 8000aba:	2f00      	cmp	r7, #0
 8000abc:	d0a9      	beq.n	8000a12 <__sflush_r+0x1a>
 8000abe:	0793      	lsls	r3, r2, #30
 8000ac0:	680e      	ldr	r6, [r1, #0]
 8000ac2:	bf08      	it	eq
 8000ac4:	694b      	ldreq	r3, [r1, #20]
 8000ac6:	600f      	str	r7, [r1, #0]
 8000ac8:	bf18      	it	ne
 8000aca:	2300      	movne	r3, #0
 8000acc:	eba6 0807 	sub.w	r8, r6, r7
 8000ad0:	608b      	str	r3, [r1, #8]
 8000ad2:	f1b8 0f00 	cmp.w	r8, #0
 8000ad6:	dd9c      	ble.n	8000a12 <__sflush_r+0x1a>
 8000ad8:	6a21      	ldr	r1, [r4, #32]
 8000ada:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000adc:	4643      	mov	r3, r8
 8000ade:	463a      	mov	r2, r7
 8000ae0:	4628      	mov	r0, r5
 8000ae2:	47b0      	blx	r6
 8000ae4:	2800      	cmp	r0, #0
 8000ae6:	dc06      	bgt.n	8000af6 <__sflush_r+0xfe>
 8000ae8:	89a3      	ldrh	r3, [r4, #12]
 8000aea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aee:	81a3      	strh	r3, [r4, #12]
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	e78e      	b.n	8000a14 <__sflush_r+0x1c>
 8000af6:	4407      	add	r7, r0
 8000af8:	eba8 0800 	sub.w	r8, r8, r0
 8000afc:	e7e9      	b.n	8000ad2 <__sflush_r+0xda>
 8000afe:	bf00      	nop
 8000b00:	20400001 	.word	0x20400001

08000b04 <_fflush_r>:
 8000b04:	b538      	push	{r3, r4, r5, lr}
 8000b06:	690b      	ldr	r3, [r1, #16]
 8000b08:	4605      	mov	r5, r0
 8000b0a:	460c      	mov	r4, r1
 8000b0c:	b913      	cbnz	r3, 8000b14 <_fflush_r+0x10>
 8000b0e:	2500      	movs	r5, #0
 8000b10:	4628      	mov	r0, r5
 8000b12:	bd38      	pop	{r3, r4, r5, pc}
 8000b14:	b118      	cbz	r0, 8000b1e <_fflush_r+0x1a>
 8000b16:	6983      	ldr	r3, [r0, #24]
 8000b18:	b90b      	cbnz	r3, 8000b1e <_fflush_r+0x1a>
 8000b1a:	f000 f887 	bl	8000c2c <__sinit>
 8000b1e:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <_fflush_r+0x6c>)
 8000b20:	429c      	cmp	r4, r3
 8000b22:	d11b      	bne.n	8000b5c <_fflush_r+0x58>
 8000b24:	686c      	ldr	r4, [r5, #4]
 8000b26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d0ef      	beq.n	8000b0e <_fflush_r+0xa>
 8000b2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000b30:	07d0      	lsls	r0, r2, #31
 8000b32:	d404      	bmi.n	8000b3e <_fflush_r+0x3a>
 8000b34:	0599      	lsls	r1, r3, #22
 8000b36:	d402      	bmi.n	8000b3e <_fflush_r+0x3a>
 8000b38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b3a:	f000 f915 	bl	8000d68 <__retarget_lock_acquire_recursive>
 8000b3e:	4628      	mov	r0, r5
 8000b40:	4621      	mov	r1, r4
 8000b42:	f7ff ff59 	bl	80009f8 <__sflush_r>
 8000b46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000b48:	07da      	lsls	r2, r3, #31
 8000b4a:	4605      	mov	r5, r0
 8000b4c:	d4e0      	bmi.n	8000b10 <_fflush_r+0xc>
 8000b4e:	89a3      	ldrh	r3, [r4, #12]
 8000b50:	059b      	lsls	r3, r3, #22
 8000b52:	d4dd      	bmi.n	8000b10 <_fflush_r+0xc>
 8000b54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b56:	f000 f908 	bl	8000d6a <__retarget_lock_release_recursive>
 8000b5a:	e7d9      	b.n	8000b10 <_fflush_r+0xc>
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <_fflush_r+0x70>)
 8000b5e:	429c      	cmp	r4, r3
 8000b60:	d101      	bne.n	8000b66 <_fflush_r+0x62>
 8000b62:	68ac      	ldr	r4, [r5, #8]
 8000b64:	e7df      	b.n	8000b26 <_fflush_r+0x22>
 8000b66:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <_fflush_r+0x74>)
 8000b68:	429c      	cmp	r4, r3
 8000b6a:	bf08      	it	eq
 8000b6c:	68ec      	ldreq	r4, [r5, #12]
 8000b6e:	e7da      	b.n	8000b26 <_fflush_r+0x22>
 8000b70:	08001774 	.word	0x08001774
 8000b74:	08001794 	.word	0x08001794
 8000b78:	08001754 	.word	0x08001754

08000b7c <std>:
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	b510      	push	{r4, lr}
 8000b80:	4604      	mov	r4, r0
 8000b82:	e9c0 3300 	strd	r3, r3, [r0]
 8000b86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000b8a:	6083      	str	r3, [r0, #8]
 8000b8c:	8181      	strh	r1, [r0, #12]
 8000b8e:	6643      	str	r3, [r0, #100]	; 0x64
 8000b90:	81c2      	strh	r2, [r0, #14]
 8000b92:	6183      	str	r3, [r0, #24]
 8000b94:	4619      	mov	r1, r3
 8000b96:	2208      	movs	r2, #8
 8000b98:	305c      	adds	r0, #92	; 0x5c
 8000b9a:	f7ff fdd7 	bl	800074c <memset>
 8000b9e:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <std+0x38>)
 8000ba0:	6263      	str	r3, [r4, #36]	; 0x24
 8000ba2:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <std+0x3c>)
 8000ba4:	62a3      	str	r3, [r4, #40]	; 0x28
 8000ba6:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <std+0x40>)
 8000ba8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000baa:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <std+0x44>)
 8000bac:	6224      	str	r4, [r4, #32]
 8000bae:	6323      	str	r3, [r4, #48]	; 0x30
 8000bb0:	bd10      	pop	{r4, pc}
 8000bb2:	bf00      	nop
 8000bb4:	08001585 	.word	0x08001585
 8000bb8:	080015a7 	.word	0x080015a7
 8000bbc:	080015df 	.word	0x080015df
 8000bc0:	08001603 	.word	0x08001603

08000bc4 <_cleanup_r>:
 8000bc4:	4901      	ldr	r1, [pc, #4]	; (8000bcc <_cleanup_r+0x8>)
 8000bc6:	f000 b8af 	b.w	8000d28 <_fwalk_reent>
 8000bca:	bf00      	nop
 8000bcc:	08000b05 	.word	0x08000b05

08000bd0 <__sfmoreglue>:
 8000bd0:	b570      	push	{r4, r5, r6, lr}
 8000bd2:	1e4a      	subs	r2, r1, #1
 8000bd4:	2568      	movs	r5, #104	; 0x68
 8000bd6:	4355      	muls	r5, r2
 8000bd8:	460e      	mov	r6, r1
 8000bda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000bde:	f000 f979 	bl	8000ed4 <_malloc_r>
 8000be2:	4604      	mov	r4, r0
 8000be4:	b140      	cbz	r0, 8000bf8 <__sfmoreglue+0x28>
 8000be6:	2100      	movs	r1, #0
 8000be8:	e9c0 1600 	strd	r1, r6, [r0]
 8000bec:	300c      	adds	r0, #12
 8000bee:	60a0      	str	r0, [r4, #8]
 8000bf0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000bf4:	f7ff fdaa 	bl	800074c <memset>
 8000bf8:	4620      	mov	r0, r4
 8000bfa:	bd70      	pop	{r4, r5, r6, pc}

08000bfc <__sfp_lock_acquire>:
 8000bfc:	4801      	ldr	r0, [pc, #4]	; (8000c04 <__sfp_lock_acquire+0x8>)
 8000bfe:	f000 b8b3 	b.w	8000d68 <__retarget_lock_acquire_recursive>
 8000c02:	bf00      	nop
 8000c04:	200000fc 	.word	0x200000fc

08000c08 <__sfp_lock_release>:
 8000c08:	4801      	ldr	r0, [pc, #4]	; (8000c10 <__sfp_lock_release+0x8>)
 8000c0a:	f000 b8ae 	b.w	8000d6a <__retarget_lock_release_recursive>
 8000c0e:	bf00      	nop
 8000c10:	200000fc 	.word	0x200000fc

08000c14 <__sinit_lock_acquire>:
 8000c14:	4801      	ldr	r0, [pc, #4]	; (8000c1c <__sinit_lock_acquire+0x8>)
 8000c16:	f000 b8a7 	b.w	8000d68 <__retarget_lock_acquire_recursive>
 8000c1a:	bf00      	nop
 8000c1c:	200000f7 	.word	0x200000f7

08000c20 <__sinit_lock_release>:
 8000c20:	4801      	ldr	r0, [pc, #4]	; (8000c28 <__sinit_lock_release+0x8>)
 8000c22:	f000 b8a2 	b.w	8000d6a <__retarget_lock_release_recursive>
 8000c26:	bf00      	nop
 8000c28:	200000f7 	.word	0x200000f7

08000c2c <__sinit>:
 8000c2c:	b510      	push	{r4, lr}
 8000c2e:	4604      	mov	r4, r0
 8000c30:	f7ff fff0 	bl	8000c14 <__sinit_lock_acquire>
 8000c34:	69a3      	ldr	r3, [r4, #24]
 8000c36:	b11b      	cbz	r3, 8000c40 <__sinit+0x14>
 8000c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c3c:	f7ff bff0 	b.w	8000c20 <__sinit_lock_release>
 8000c40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000c44:	6523      	str	r3, [r4, #80]	; 0x50
 8000c46:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <__sinit+0x68>)
 8000c48:	4a13      	ldr	r2, [pc, #76]	; (8000c98 <__sinit+0x6c>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8000c4e:	42a3      	cmp	r3, r4
 8000c50:	bf04      	itt	eq
 8000c52:	2301      	moveq	r3, #1
 8000c54:	61a3      	streq	r3, [r4, #24]
 8000c56:	4620      	mov	r0, r4
 8000c58:	f000 f820 	bl	8000c9c <__sfp>
 8000c5c:	6060      	str	r0, [r4, #4]
 8000c5e:	4620      	mov	r0, r4
 8000c60:	f000 f81c 	bl	8000c9c <__sfp>
 8000c64:	60a0      	str	r0, [r4, #8]
 8000c66:	4620      	mov	r0, r4
 8000c68:	f000 f818 	bl	8000c9c <__sfp>
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	60e0      	str	r0, [r4, #12]
 8000c70:	2104      	movs	r1, #4
 8000c72:	6860      	ldr	r0, [r4, #4]
 8000c74:	f7ff ff82 	bl	8000b7c <std>
 8000c78:	68a0      	ldr	r0, [r4, #8]
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	2109      	movs	r1, #9
 8000c7e:	f7ff ff7d 	bl	8000b7c <std>
 8000c82:	68e0      	ldr	r0, [r4, #12]
 8000c84:	2202      	movs	r2, #2
 8000c86:	2112      	movs	r1, #18
 8000c88:	f7ff ff78 	bl	8000b7c <std>
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	61a3      	str	r3, [r4, #24]
 8000c90:	e7d2      	b.n	8000c38 <__sinit+0xc>
 8000c92:	bf00      	nop
 8000c94:	08001750 	.word	0x08001750
 8000c98:	08000bc5 	.word	0x08000bc5

08000c9c <__sfp>:
 8000c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c9e:	4607      	mov	r7, r0
 8000ca0:	f7ff ffac 	bl	8000bfc <__sfp_lock_acquire>
 8000ca4:	4b1e      	ldr	r3, [pc, #120]	; (8000d20 <__sfp+0x84>)
 8000ca6:	681e      	ldr	r6, [r3, #0]
 8000ca8:	69b3      	ldr	r3, [r6, #24]
 8000caa:	b913      	cbnz	r3, 8000cb2 <__sfp+0x16>
 8000cac:	4630      	mov	r0, r6
 8000cae:	f7ff ffbd 	bl	8000c2c <__sinit>
 8000cb2:	3648      	adds	r6, #72	; 0x48
 8000cb4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000cb8:	3b01      	subs	r3, #1
 8000cba:	d503      	bpl.n	8000cc4 <__sfp+0x28>
 8000cbc:	6833      	ldr	r3, [r6, #0]
 8000cbe:	b30b      	cbz	r3, 8000d04 <__sfp+0x68>
 8000cc0:	6836      	ldr	r6, [r6, #0]
 8000cc2:	e7f7      	b.n	8000cb4 <__sfp+0x18>
 8000cc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000cc8:	b9d5      	cbnz	r5, 8000d00 <__sfp+0x64>
 8000cca:	4b16      	ldr	r3, [pc, #88]	; (8000d24 <__sfp+0x88>)
 8000ccc:	60e3      	str	r3, [r4, #12]
 8000cce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000cd2:	6665      	str	r5, [r4, #100]	; 0x64
 8000cd4:	f000 f847 	bl	8000d66 <__retarget_lock_init_recursive>
 8000cd8:	f7ff ff96 	bl	8000c08 <__sfp_lock_release>
 8000cdc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000ce0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000ce4:	6025      	str	r5, [r4, #0]
 8000ce6:	61a5      	str	r5, [r4, #24]
 8000ce8:	2208      	movs	r2, #8
 8000cea:	4629      	mov	r1, r5
 8000cec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000cf0:	f7ff fd2c 	bl	800074c <memset>
 8000cf4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000cf8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000cfc:	4620      	mov	r0, r4
 8000cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d00:	3468      	adds	r4, #104	; 0x68
 8000d02:	e7d9      	b.n	8000cb8 <__sfp+0x1c>
 8000d04:	2104      	movs	r1, #4
 8000d06:	4638      	mov	r0, r7
 8000d08:	f7ff ff62 	bl	8000bd0 <__sfmoreglue>
 8000d0c:	4604      	mov	r4, r0
 8000d0e:	6030      	str	r0, [r6, #0]
 8000d10:	2800      	cmp	r0, #0
 8000d12:	d1d5      	bne.n	8000cc0 <__sfp+0x24>
 8000d14:	f7ff ff78 	bl	8000c08 <__sfp_lock_release>
 8000d18:	230c      	movs	r3, #12
 8000d1a:	603b      	str	r3, [r7, #0]
 8000d1c:	e7ee      	b.n	8000cfc <__sfp+0x60>
 8000d1e:	bf00      	nop
 8000d20:	08001750 	.word	0x08001750
 8000d24:	ffff0001 	.word	0xffff0001

08000d28 <_fwalk_reent>:
 8000d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d2c:	4606      	mov	r6, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000d34:	2700      	movs	r7, #0
 8000d36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000d3a:	f1b9 0901 	subs.w	r9, r9, #1
 8000d3e:	d505      	bpl.n	8000d4c <_fwalk_reent+0x24>
 8000d40:	6824      	ldr	r4, [r4, #0]
 8000d42:	2c00      	cmp	r4, #0
 8000d44:	d1f7      	bne.n	8000d36 <_fwalk_reent+0xe>
 8000d46:	4638      	mov	r0, r7
 8000d48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000d4c:	89ab      	ldrh	r3, [r5, #12]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d907      	bls.n	8000d62 <_fwalk_reent+0x3a>
 8000d52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000d56:	3301      	adds	r3, #1
 8000d58:	d003      	beq.n	8000d62 <_fwalk_reent+0x3a>
 8000d5a:	4629      	mov	r1, r5
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	47c0      	blx	r8
 8000d60:	4307      	orrs	r7, r0
 8000d62:	3568      	adds	r5, #104	; 0x68
 8000d64:	e7e9      	b.n	8000d3a <_fwalk_reent+0x12>

08000d66 <__retarget_lock_init_recursive>:
 8000d66:	4770      	bx	lr

08000d68 <__retarget_lock_acquire_recursive>:
 8000d68:	4770      	bx	lr

08000d6a <__retarget_lock_release_recursive>:
 8000d6a:	4770      	bx	lr

08000d6c <__swhatbuf_r>:
 8000d6c:	b570      	push	{r4, r5, r6, lr}
 8000d6e:	460e      	mov	r6, r1
 8000d70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d74:	2900      	cmp	r1, #0
 8000d76:	b096      	sub	sp, #88	; 0x58
 8000d78:	4614      	mov	r4, r2
 8000d7a:	461d      	mov	r5, r3
 8000d7c:	da07      	bge.n	8000d8e <__swhatbuf_r+0x22>
 8000d7e:	2300      	movs	r3, #0
 8000d80:	602b      	str	r3, [r5, #0]
 8000d82:	89b3      	ldrh	r3, [r6, #12]
 8000d84:	061a      	lsls	r2, r3, #24
 8000d86:	d410      	bmi.n	8000daa <__swhatbuf_r+0x3e>
 8000d88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d8c:	e00e      	b.n	8000dac <__swhatbuf_r+0x40>
 8000d8e:	466a      	mov	r2, sp
 8000d90:	f000 fc5e 	bl	8001650 <_fstat_r>
 8000d94:	2800      	cmp	r0, #0
 8000d96:	dbf2      	blt.n	8000d7e <__swhatbuf_r+0x12>
 8000d98:	9a01      	ldr	r2, [sp, #4]
 8000d9a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000d9e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000da2:	425a      	negs	r2, r3
 8000da4:	415a      	adcs	r2, r3
 8000da6:	602a      	str	r2, [r5, #0]
 8000da8:	e7ee      	b.n	8000d88 <__swhatbuf_r+0x1c>
 8000daa:	2340      	movs	r3, #64	; 0x40
 8000dac:	2000      	movs	r0, #0
 8000dae:	6023      	str	r3, [r4, #0]
 8000db0:	b016      	add	sp, #88	; 0x58
 8000db2:	bd70      	pop	{r4, r5, r6, pc}

08000db4 <__smakebuf_r>:
 8000db4:	898b      	ldrh	r3, [r1, #12]
 8000db6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000db8:	079d      	lsls	r5, r3, #30
 8000dba:	4606      	mov	r6, r0
 8000dbc:	460c      	mov	r4, r1
 8000dbe:	d507      	bpl.n	8000dd0 <__smakebuf_r+0x1c>
 8000dc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000dc4:	6023      	str	r3, [r4, #0]
 8000dc6:	6123      	str	r3, [r4, #16]
 8000dc8:	2301      	movs	r3, #1
 8000dca:	6163      	str	r3, [r4, #20]
 8000dcc:	b002      	add	sp, #8
 8000dce:	bd70      	pop	{r4, r5, r6, pc}
 8000dd0:	ab01      	add	r3, sp, #4
 8000dd2:	466a      	mov	r2, sp
 8000dd4:	f7ff ffca 	bl	8000d6c <__swhatbuf_r>
 8000dd8:	9900      	ldr	r1, [sp, #0]
 8000dda:	4605      	mov	r5, r0
 8000ddc:	4630      	mov	r0, r6
 8000dde:	f000 f879 	bl	8000ed4 <_malloc_r>
 8000de2:	b948      	cbnz	r0, 8000df8 <__smakebuf_r+0x44>
 8000de4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000de8:	059a      	lsls	r2, r3, #22
 8000dea:	d4ef      	bmi.n	8000dcc <__smakebuf_r+0x18>
 8000dec:	f023 0303 	bic.w	r3, r3, #3
 8000df0:	f043 0302 	orr.w	r3, r3, #2
 8000df4:	81a3      	strh	r3, [r4, #12]
 8000df6:	e7e3      	b.n	8000dc0 <__smakebuf_r+0xc>
 8000df8:	4b0d      	ldr	r3, [pc, #52]	; (8000e30 <__smakebuf_r+0x7c>)
 8000dfa:	62b3      	str	r3, [r6, #40]	; 0x28
 8000dfc:	89a3      	ldrh	r3, [r4, #12]
 8000dfe:	6020      	str	r0, [r4, #0]
 8000e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e04:	81a3      	strh	r3, [r4, #12]
 8000e06:	9b00      	ldr	r3, [sp, #0]
 8000e08:	6163      	str	r3, [r4, #20]
 8000e0a:	9b01      	ldr	r3, [sp, #4]
 8000e0c:	6120      	str	r0, [r4, #16]
 8000e0e:	b15b      	cbz	r3, 8000e28 <__smakebuf_r+0x74>
 8000e10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e14:	4630      	mov	r0, r6
 8000e16:	f000 fc2d 	bl	8001674 <_isatty_r>
 8000e1a:	b128      	cbz	r0, 8000e28 <__smakebuf_r+0x74>
 8000e1c:	89a3      	ldrh	r3, [r4, #12]
 8000e1e:	f023 0303 	bic.w	r3, r3, #3
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	81a3      	strh	r3, [r4, #12]
 8000e28:	89a0      	ldrh	r0, [r4, #12]
 8000e2a:	4305      	orrs	r5, r0
 8000e2c:	81a5      	strh	r5, [r4, #12]
 8000e2e:	e7cd      	b.n	8000dcc <__smakebuf_r+0x18>
 8000e30:	08000bc5 	.word	0x08000bc5

08000e34 <_free_r>:
 8000e34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000e36:	2900      	cmp	r1, #0
 8000e38:	d048      	beq.n	8000ecc <_free_r+0x98>
 8000e3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000e3e:	9001      	str	r0, [sp, #4]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	f1a1 0404 	sub.w	r4, r1, #4
 8000e46:	bfb8      	it	lt
 8000e48:	18e4      	addlt	r4, r4, r3
 8000e4a:	f000 fc35 	bl	80016b8 <__malloc_lock>
 8000e4e:	4a20      	ldr	r2, [pc, #128]	; (8000ed0 <_free_r+0x9c>)
 8000e50:	9801      	ldr	r0, [sp, #4]
 8000e52:	6813      	ldr	r3, [r2, #0]
 8000e54:	4615      	mov	r5, r2
 8000e56:	b933      	cbnz	r3, 8000e66 <_free_r+0x32>
 8000e58:	6063      	str	r3, [r4, #4]
 8000e5a:	6014      	str	r4, [r2, #0]
 8000e5c:	b003      	add	sp, #12
 8000e5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000e62:	f000 bc2f 	b.w	80016c4 <__malloc_unlock>
 8000e66:	42a3      	cmp	r3, r4
 8000e68:	d90b      	bls.n	8000e82 <_free_r+0x4e>
 8000e6a:	6821      	ldr	r1, [r4, #0]
 8000e6c:	1862      	adds	r2, r4, r1
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	bf04      	itt	eq
 8000e72:	681a      	ldreq	r2, [r3, #0]
 8000e74:	685b      	ldreq	r3, [r3, #4]
 8000e76:	6063      	str	r3, [r4, #4]
 8000e78:	bf04      	itt	eq
 8000e7a:	1852      	addeq	r2, r2, r1
 8000e7c:	6022      	streq	r2, [r4, #0]
 8000e7e:	602c      	str	r4, [r5, #0]
 8000e80:	e7ec      	b.n	8000e5c <_free_r+0x28>
 8000e82:	461a      	mov	r2, r3
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	b10b      	cbz	r3, 8000e8c <_free_r+0x58>
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d9fa      	bls.n	8000e82 <_free_r+0x4e>
 8000e8c:	6811      	ldr	r1, [r2, #0]
 8000e8e:	1855      	adds	r5, r2, r1
 8000e90:	42a5      	cmp	r5, r4
 8000e92:	d10b      	bne.n	8000eac <_free_r+0x78>
 8000e94:	6824      	ldr	r4, [r4, #0]
 8000e96:	4421      	add	r1, r4
 8000e98:	1854      	adds	r4, r2, r1
 8000e9a:	42a3      	cmp	r3, r4
 8000e9c:	6011      	str	r1, [r2, #0]
 8000e9e:	d1dd      	bne.n	8000e5c <_free_r+0x28>
 8000ea0:	681c      	ldr	r4, [r3, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	6053      	str	r3, [r2, #4]
 8000ea6:	4421      	add	r1, r4
 8000ea8:	6011      	str	r1, [r2, #0]
 8000eaa:	e7d7      	b.n	8000e5c <_free_r+0x28>
 8000eac:	d902      	bls.n	8000eb4 <_free_r+0x80>
 8000eae:	230c      	movs	r3, #12
 8000eb0:	6003      	str	r3, [r0, #0]
 8000eb2:	e7d3      	b.n	8000e5c <_free_r+0x28>
 8000eb4:	6825      	ldr	r5, [r4, #0]
 8000eb6:	1961      	adds	r1, r4, r5
 8000eb8:	428b      	cmp	r3, r1
 8000eba:	bf04      	itt	eq
 8000ebc:	6819      	ldreq	r1, [r3, #0]
 8000ebe:	685b      	ldreq	r3, [r3, #4]
 8000ec0:	6063      	str	r3, [r4, #4]
 8000ec2:	bf04      	itt	eq
 8000ec4:	1949      	addeq	r1, r1, r5
 8000ec6:	6021      	streq	r1, [r4, #0]
 8000ec8:	6054      	str	r4, [r2, #4]
 8000eca:	e7c7      	b.n	8000e5c <_free_r+0x28>
 8000ecc:	b003      	add	sp, #12
 8000ece:	bd30      	pop	{r4, r5, pc}
 8000ed0:	20000088 	.word	0x20000088

08000ed4 <_malloc_r>:
 8000ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ed6:	1ccd      	adds	r5, r1, #3
 8000ed8:	f025 0503 	bic.w	r5, r5, #3
 8000edc:	3508      	adds	r5, #8
 8000ede:	2d0c      	cmp	r5, #12
 8000ee0:	bf38      	it	cc
 8000ee2:	250c      	movcc	r5, #12
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	4606      	mov	r6, r0
 8000ee8:	db01      	blt.n	8000eee <_malloc_r+0x1a>
 8000eea:	42a9      	cmp	r1, r5
 8000eec:	d903      	bls.n	8000ef6 <_malloc_r+0x22>
 8000eee:	230c      	movs	r3, #12
 8000ef0:	6033      	str	r3, [r6, #0]
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ef6:	f000 fbdf 	bl	80016b8 <__malloc_lock>
 8000efa:	4921      	ldr	r1, [pc, #132]	; (8000f80 <_malloc_r+0xac>)
 8000efc:	680a      	ldr	r2, [r1, #0]
 8000efe:	4614      	mov	r4, r2
 8000f00:	b99c      	cbnz	r4, 8000f2a <_malloc_r+0x56>
 8000f02:	4f20      	ldr	r7, [pc, #128]	; (8000f84 <_malloc_r+0xb0>)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	b923      	cbnz	r3, 8000f12 <_malloc_r+0x3e>
 8000f08:	4621      	mov	r1, r4
 8000f0a:	4630      	mov	r0, r6
 8000f0c:	f000 fb2a 	bl	8001564 <_sbrk_r>
 8000f10:	6038      	str	r0, [r7, #0]
 8000f12:	4629      	mov	r1, r5
 8000f14:	4630      	mov	r0, r6
 8000f16:	f000 fb25 	bl	8001564 <_sbrk_r>
 8000f1a:	1c43      	adds	r3, r0, #1
 8000f1c:	d123      	bne.n	8000f66 <_malloc_r+0x92>
 8000f1e:	230c      	movs	r3, #12
 8000f20:	6033      	str	r3, [r6, #0]
 8000f22:	4630      	mov	r0, r6
 8000f24:	f000 fbce 	bl	80016c4 <__malloc_unlock>
 8000f28:	e7e3      	b.n	8000ef2 <_malloc_r+0x1e>
 8000f2a:	6823      	ldr	r3, [r4, #0]
 8000f2c:	1b5b      	subs	r3, r3, r5
 8000f2e:	d417      	bmi.n	8000f60 <_malloc_r+0x8c>
 8000f30:	2b0b      	cmp	r3, #11
 8000f32:	d903      	bls.n	8000f3c <_malloc_r+0x68>
 8000f34:	6023      	str	r3, [r4, #0]
 8000f36:	441c      	add	r4, r3
 8000f38:	6025      	str	r5, [r4, #0]
 8000f3a:	e004      	b.n	8000f46 <_malloc_r+0x72>
 8000f3c:	6863      	ldr	r3, [r4, #4]
 8000f3e:	42a2      	cmp	r2, r4
 8000f40:	bf0c      	ite	eq
 8000f42:	600b      	streq	r3, [r1, #0]
 8000f44:	6053      	strne	r3, [r2, #4]
 8000f46:	4630      	mov	r0, r6
 8000f48:	f000 fbbc 	bl	80016c4 <__malloc_unlock>
 8000f4c:	f104 000b 	add.w	r0, r4, #11
 8000f50:	1d23      	adds	r3, r4, #4
 8000f52:	f020 0007 	bic.w	r0, r0, #7
 8000f56:	1ac2      	subs	r2, r0, r3
 8000f58:	d0cc      	beq.n	8000ef4 <_malloc_r+0x20>
 8000f5a:	1a1b      	subs	r3, r3, r0
 8000f5c:	50a3      	str	r3, [r4, r2]
 8000f5e:	e7c9      	b.n	8000ef4 <_malloc_r+0x20>
 8000f60:	4622      	mov	r2, r4
 8000f62:	6864      	ldr	r4, [r4, #4]
 8000f64:	e7cc      	b.n	8000f00 <_malloc_r+0x2c>
 8000f66:	1cc4      	adds	r4, r0, #3
 8000f68:	f024 0403 	bic.w	r4, r4, #3
 8000f6c:	42a0      	cmp	r0, r4
 8000f6e:	d0e3      	beq.n	8000f38 <_malloc_r+0x64>
 8000f70:	1a21      	subs	r1, r4, r0
 8000f72:	4630      	mov	r0, r6
 8000f74:	f000 faf6 	bl	8001564 <_sbrk_r>
 8000f78:	3001      	adds	r0, #1
 8000f7a:	d1dd      	bne.n	8000f38 <_malloc_r+0x64>
 8000f7c:	e7cf      	b.n	8000f1e <_malloc_r+0x4a>
 8000f7e:	bf00      	nop
 8000f80:	20000088 	.word	0x20000088
 8000f84:	2000008c 	.word	0x2000008c

08000f88 <__sfputc_r>:
 8000f88:	6893      	ldr	r3, [r2, #8]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	b410      	push	{r4}
 8000f90:	6093      	str	r3, [r2, #8]
 8000f92:	da08      	bge.n	8000fa6 <__sfputc_r+0x1e>
 8000f94:	6994      	ldr	r4, [r2, #24]
 8000f96:	42a3      	cmp	r3, r4
 8000f98:	db01      	blt.n	8000f9e <__sfputc_r+0x16>
 8000f9a:	290a      	cmp	r1, #10
 8000f9c:	d103      	bne.n	8000fa6 <__sfputc_r+0x1e>
 8000f9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000fa2:	f7ff bc69 	b.w	8000878 <__swbuf_r>
 8000fa6:	6813      	ldr	r3, [r2, #0]
 8000fa8:	1c58      	adds	r0, r3, #1
 8000faa:	6010      	str	r0, [r2, #0]
 8000fac:	7019      	strb	r1, [r3, #0]
 8000fae:	4608      	mov	r0, r1
 8000fb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <__sfputs_r>:
 8000fb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fb8:	4606      	mov	r6, r0
 8000fba:	460f      	mov	r7, r1
 8000fbc:	4614      	mov	r4, r2
 8000fbe:	18d5      	adds	r5, r2, r3
 8000fc0:	42ac      	cmp	r4, r5
 8000fc2:	d101      	bne.n	8000fc8 <__sfputs_r+0x12>
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	e007      	b.n	8000fd8 <__sfputs_r+0x22>
 8000fc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000fcc:	463a      	mov	r2, r7
 8000fce:	4630      	mov	r0, r6
 8000fd0:	f7ff ffda 	bl	8000f88 <__sfputc_r>
 8000fd4:	1c43      	adds	r3, r0, #1
 8000fd6:	d1f3      	bne.n	8000fc0 <__sfputs_r+0xa>
 8000fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000fdc <_vfiprintf_r>:
 8000fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fe0:	460d      	mov	r5, r1
 8000fe2:	b09d      	sub	sp, #116	; 0x74
 8000fe4:	4614      	mov	r4, r2
 8000fe6:	4698      	mov	r8, r3
 8000fe8:	4606      	mov	r6, r0
 8000fea:	b118      	cbz	r0, 8000ff4 <_vfiprintf_r+0x18>
 8000fec:	6983      	ldr	r3, [r0, #24]
 8000fee:	b90b      	cbnz	r3, 8000ff4 <_vfiprintf_r+0x18>
 8000ff0:	f7ff fe1c 	bl	8000c2c <__sinit>
 8000ff4:	4b89      	ldr	r3, [pc, #548]	; (800121c <_vfiprintf_r+0x240>)
 8000ff6:	429d      	cmp	r5, r3
 8000ff8:	d11b      	bne.n	8001032 <_vfiprintf_r+0x56>
 8000ffa:	6875      	ldr	r5, [r6, #4]
 8000ffc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000ffe:	07d9      	lsls	r1, r3, #31
 8001000:	d405      	bmi.n	800100e <_vfiprintf_r+0x32>
 8001002:	89ab      	ldrh	r3, [r5, #12]
 8001004:	059a      	lsls	r2, r3, #22
 8001006:	d402      	bmi.n	800100e <_vfiprintf_r+0x32>
 8001008:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800100a:	f7ff fead 	bl	8000d68 <__retarget_lock_acquire_recursive>
 800100e:	89ab      	ldrh	r3, [r5, #12]
 8001010:	071b      	lsls	r3, r3, #28
 8001012:	d501      	bpl.n	8001018 <_vfiprintf_r+0x3c>
 8001014:	692b      	ldr	r3, [r5, #16]
 8001016:	b9eb      	cbnz	r3, 8001054 <_vfiprintf_r+0x78>
 8001018:	4629      	mov	r1, r5
 800101a:	4630      	mov	r0, r6
 800101c:	f7ff fc7e 	bl	800091c <__swsetup_r>
 8001020:	b1c0      	cbz	r0, 8001054 <_vfiprintf_r+0x78>
 8001022:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001024:	07dc      	lsls	r4, r3, #31
 8001026:	d50e      	bpl.n	8001046 <_vfiprintf_r+0x6a>
 8001028:	f04f 30ff 	mov.w	r0, #4294967295
 800102c:	b01d      	add	sp, #116	; 0x74
 800102e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001032:	4b7b      	ldr	r3, [pc, #492]	; (8001220 <_vfiprintf_r+0x244>)
 8001034:	429d      	cmp	r5, r3
 8001036:	d101      	bne.n	800103c <_vfiprintf_r+0x60>
 8001038:	68b5      	ldr	r5, [r6, #8]
 800103a:	e7df      	b.n	8000ffc <_vfiprintf_r+0x20>
 800103c:	4b79      	ldr	r3, [pc, #484]	; (8001224 <_vfiprintf_r+0x248>)
 800103e:	429d      	cmp	r5, r3
 8001040:	bf08      	it	eq
 8001042:	68f5      	ldreq	r5, [r6, #12]
 8001044:	e7da      	b.n	8000ffc <_vfiprintf_r+0x20>
 8001046:	89ab      	ldrh	r3, [r5, #12]
 8001048:	0598      	lsls	r0, r3, #22
 800104a:	d4ed      	bmi.n	8001028 <_vfiprintf_r+0x4c>
 800104c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800104e:	f7ff fe8c 	bl	8000d6a <__retarget_lock_release_recursive>
 8001052:	e7e9      	b.n	8001028 <_vfiprintf_r+0x4c>
 8001054:	2300      	movs	r3, #0
 8001056:	9309      	str	r3, [sp, #36]	; 0x24
 8001058:	2320      	movs	r3, #32
 800105a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800105e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001062:	2330      	movs	r3, #48	; 0x30
 8001064:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001228 <_vfiprintf_r+0x24c>
 8001068:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800106c:	f04f 0901 	mov.w	r9, #1
 8001070:	4623      	mov	r3, r4
 8001072:	469a      	mov	sl, r3
 8001074:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001078:	b10a      	cbz	r2, 800107e <_vfiprintf_r+0xa2>
 800107a:	2a25      	cmp	r2, #37	; 0x25
 800107c:	d1f9      	bne.n	8001072 <_vfiprintf_r+0x96>
 800107e:	ebba 0b04 	subs.w	fp, sl, r4
 8001082:	d00b      	beq.n	800109c <_vfiprintf_r+0xc0>
 8001084:	465b      	mov	r3, fp
 8001086:	4622      	mov	r2, r4
 8001088:	4629      	mov	r1, r5
 800108a:	4630      	mov	r0, r6
 800108c:	f7ff ff93 	bl	8000fb6 <__sfputs_r>
 8001090:	3001      	adds	r0, #1
 8001092:	f000 80aa 	beq.w	80011ea <_vfiprintf_r+0x20e>
 8001096:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001098:	445a      	add	r2, fp
 800109a:	9209      	str	r2, [sp, #36]	; 0x24
 800109c:	f89a 3000 	ldrb.w	r3, [sl]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	f000 80a2 	beq.w	80011ea <_vfiprintf_r+0x20e>
 80010a6:	2300      	movs	r3, #0
 80010a8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80010b0:	f10a 0a01 	add.w	sl, sl, #1
 80010b4:	9304      	str	r3, [sp, #16]
 80010b6:	9307      	str	r3, [sp, #28]
 80010b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80010bc:	931a      	str	r3, [sp, #104]	; 0x68
 80010be:	4654      	mov	r4, sl
 80010c0:	2205      	movs	r2, #5
 80010c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80010c6:	4858      	ldr	r0, [pc, #352]	; (8001228 <_vfiprintf_r+0x24c>)
 80010c8:	f7ff f8b2 	bl	8000230 <memchr>
 80010cc:	9a04      	ldr	r2, [sp, #16]
 80010ce:	b9d8      	cbnz	r0, 8001108 <_vfiprintf_r+0x12c>
 80010d0:	06d1      	lsls	r1, r2, #27
 80010d2:	bf44      	itt	mi
 80010d4:	2320      	movmi	r3, #32
 80010d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80010da:	0713      	lsls	r3, r2, #28
 80010dc:	bf44      	itt	mi
 80010de:	232b      	movmi	r3, #43	; 0x2b
 80010e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80010e4:	f89a 3000 	ldrb.w	r3, [sl]
 80010e8:	2b2a      	cmp	r3, #42	; 0x2a
 80010ea:	d015      	beq.n	8001118 <_vfiprintf_r+0x13c>
 80010ec:	9a07      	ldr	r2, [sp, #28]
 80010ee:	4654      	mov	r4, sl
 80010f0:	2000      	movs	r0, #0
 80010f2:	f04f 0c0a 	mov.w	ip, #10
 80010f6:	4621      	mov	r1, r4
 80010f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80010fc:	3b30      	subs	r3, #48	; 0x30
 80010fe:	2b09      	cmp	r3, #9
 8001100:	d94e      	bls.n	80011a0 <_vfiprintf_r+0x1c4>
 8001102:	b1b0      	cbz	r0, 8001132 <_vfiprintf_r+0x156>
 8001104:	9207      	str	r2, [sp, #28]
 8001106:	e014      	b.n	8001132 <_vfiprintf_r+0x156>
 8001108:	eba0 0308 	sub.w	r3, r0, r8
 800110c:	fa09 f303 	lsl.w	r3, r9, r3
 8001110:	4313      	orrs	r3, r2
 8001112:	9304      	str	r3, [sp, #16]
 8001114:	46a2      	mov	sl, r4
 8001116:	e7d2      	b.n	80010be <_vfiprintf_r+0xe2>
 8001118:	9b03      	ldr	r3, [sp, #12]
 800111a:	1d19      	adds	r1, r3, #4
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	9103      	str	r1, [sp, #12]
 8001120:	2b00      	cmp	r3, #0
 8001122:	bfbb      	ittet	lt
 8001124:	425b      	neglt	r3, r3
 8001126:	f042 0202 	orrlt.w	r2, r2, #2
 800112a:	9307      	strge	r3, [sp, #28]
 800112c:	9307      	strlt	r3, [sp, #28]
 800112e:	bfb8      	it	lt
 8001130:	9204      	strlt	r2, [sp, #16]
 8001132:	7823      	ldrb	r3, [r4, #0]
 8001134:	2b2e      	cmp	r3, #46	; 0x2e
 8001136:	d10c      	bne.n	8001152 <_vfiprintf_r+0x176>
 8001138:	7863      	ldrb	r3, [r4, #1]
 800113a:	2b2a      	cmp	r3, #42	; 0x2a
 800113c:	d135      	bne.n	80011aa <_vfiprintf_r+0x1ce>
 800113e:	9b03      	ldr	r3, [sp, #12]
 8001140:	1d1a      	adds	r2, r3, #4
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	9203      	str	r2, [sp, #12]
 8001146:	2b00      	cmp	r3, #0
 8001148:	bfb8      	it	lt
 800114a:	f04f 33ff 	movlt.w	r3, #4294967295
 800114e:	3402      	adds	r4, #2
 8001150:	9305      	str	r3, [sp, #20]
 8001152:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001238 <_vfiprintf_r+0x25c>
 8001156:	7821      	ldrb	r1, [r4, #0]
 8001158:	2203      	movs	r2, #3
 800115a:	4650      	mov	r0, sl
 800115c:	f7ff f868 	bl	8000230 <memchr>
 8001160:	b140      	cbz	r0, 8001174 <_vfiprintf_r+0x198>
 8001162:	2340      	movs	r3, #64	; 0x40
 8001164:	eba0 000a 	sub.w	r0, r0, sl
 8001168:	fa03 f000 	lsl.w	r0, r3, r0
 800116c:	9b04      	ldr	r3, [sp, #16]
 800116e:	4303      	orrs	r3, r0
 8001170:	3401      	adds	r4, #1
 8001172:	9304      	str	r3, [sp, #16]
 8001174:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001178:	482c      	ldr	r0, [pc, #176]	; (800122c <_vfiprintf_r+0x250>)
 800117a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800117e:	2206      	movs	r2, #6
 8001180:	f7ff f856 	bl	8000230 <memchr>
 8001184:	2800      	cmp	r0, #0
 8001186:	d03f      	beq.n	8001208 <_vfiprintf_r+0x22c>
 8001188:	4b29      	ldr	r3, [pc, #164]	; (8001230 <_vfiprintf_r+0x254>)
 800118a:	bb1b      	cbnz	r3, 80011d4 <_vfiprintf_r+0x1f8>
 800118c:	9b03      	ldr	r3, [sp, #12]
 800118e:	3307      	adds	r3, #7
 8001190:	f023 0307 	bic.w	r3, r3, #7
 8001194:	3308      	adds	r3, #8
 8001196:	9303      	str	r3, [sp, #12]
 8001198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800119a:	443b      	add	r3, r7
 800119c:	9309      	str	r3, [sp, #36]	; 0x24
 800119e:	e767      	b.n	8001070 <_vfiprintf_r+0x94>
 80011a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80011a4:	460c      	mov	r4, r1
 80011a6:	2001      	movs	r0, #1
 80011a8:	e7a5      	b.n	80010f6 <_vfiprintf_r+0x11a>
 80011aa:	2300      	movs	r3, #0
 80011ac:	3401      	adds	r4, #1
 80011ae:	9305      	str	r3, [sp, #20]
 80011b0:	4619      	mov	r1, r3
 80011b2:	f04f 0c0a 	mov.w	ip, #10
 80011b6:	4620      	mov	r0, r4
 80011b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80011bc:	3a30      	subs	r2, #48	; 0x30
 80011be:	2a09      	cmp	r2, #9
 80011c0:	d903      	bls.n	80011ca <_vfiprintf_r+0x1ee>
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d0c5      	beq.n	8001152 <_vfiprintf_r+0x176>
 80011c6:	9105      	str	r1, [sp, #20]
 80011c8:	e7c3      	b.n	8001152 <_vfiprintf_r+0x176>
 80011ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80011ce:	4604      	mov	r4, r0
 80011d0:	2301      	movs	r3, #1
 80011d2:	e7f0      	b.n	80011b6 <_vfiprintf_r+0x1da>
 80011d4:	ab03      	add	r3, sp, #12
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	462a      	mov	r2, r5
 80011da:	4b16      	ldr	r3, [pc, #88]	; (8001234 <_vfiprintf_r+0x258>)
 80011dc:	a904      	add	r1, sp, #16
 80011de:	4630      	mov	r0, r6
 80011e0:	f3af 8000 	nop.w
 80011e4:	4607      	mov	r7, r0
 80011e6:	1c78      	adds	r0, r7, #1
 80011e8:	d1d6      	bne.n	8001198 <_vfiprintf_r+0x1bc>
 80011ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80011ec:	07d9      	lsls	r1, r3, #31
 80011ee:	d405      	bmi.n	80011fc <_vfiprintf_r+0x220>
 80011f0:	89ab      	ldrh	r3, [r5, #12]
 80011f2:	059a      	lsls	r2, r3, #22
 80011f4:	d402      	bmi.n	80011fc <_vfiprintf_r+0x220>
 80011f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80011f8:	f7ff fdb7 	bl	8000d6a <__retarget_lock_release_recursive>
 80011fc:	89ab      	ldrh	r3, [r5, #12]
 80011fe:	065b      	lsls	r3, r3, #25
 8001200:	f53f af12 	bmi.w	8001028 <_vfiprintf_r+0x4c>
 8001204:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001206:	e711      	b.n	800102c <_vfiprintf_r+0x50>
 8001208:	ab03      	add	r3, sp, #12
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	462a      	mov	r2, r5
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <_vfiprintf_r+0x258>)
 8001210:	a904      	add	r1, sp, #16
 8001212:	4630      	mov	r0, r6
 8001214:	f000 f880 	bl	8001318 <_printf_i>
 8001218:	e7e4      	b.n	80011e4 <_vfiprintf_r+0x208>
 800121a:	bf00      	nop
 800121c:	08001774 	.word	0x08001774
 8001220:	08001794 	.word	0x08001794
 8001224:	08001754 	.word	0x08001754
 8001228:	080017b4 	.word	0x080017b4
 800122c:	080017be 	.word	0x080017be
 8001230:	00000000 	.word	0x00000000
 8001234:	08000fb7 	.word	0x08000fb7
 8001238:	080017ba 	.word	0x080017ba

0800123c <_printf_common>:
 800123c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001240:	4616      	mov	r6, r2
 8001242:	4699      	mov	r9, r3
 8001244:	688a      	ldr	r2, [r1, #8]
 8001246:	690b      	ldr	r3, [r1, #16]
 8001248:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800124c:	4293      	cmp	r3, r2
 800124e:	bfb8      	it	lt
 8001250:	4613      	movlt	r3, r2
 8001252:	6033      	str	r3, [r6, #0]
 8001254:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001258:	4607      	mov	r7, r0
 800125a:	460c      	mov	r4, r1
 800125c:	b10a      	cbz	r2, 8001262 <_printf_common+0x26>
 800125e:	3301      	adds	r3, #1
 8001260:	6033      	str	r3, [r6, #0]
 8001262:	6823      	ldr	r3, [r4, #0]
 8001264:	0699      	lsls	r1, r3, #26
 8001266:	bf42      	ittt	mi
 8001268:	6833      	ldrmi	r3, [r6, #0]
 800126a:	3302      	addmi	r3, #2
 800126c:	6033      	strmi	r3, [r6, #0]
 800126e:	6825      	ldr	r5, [r4, #0]
 8001270:	f015 0506 	ands.w	r5, r5, #6
 8001274:	d106      	bne.n	8001284 <_printf_common+0x48>
 8001276:	f104 0a19 	add.w	sl, r4, #25
 800127a:	68e3      	ldr	r3, [r4, #12]
 800127c:	6832      	ldr	r2, [r6, #0]
 800127e:	1a9b      	subs	r3, r3, r2
 8001280:	42ab      	cmp	r3, r5
 8001282:	dc26      	bgt.n	80012d2 <_printf_common+0x96>
 8001284:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001288:	1e13      	subs	r3, r2, #0
 800128a:	6822      	ldr	r2, [r4, #0]
 800128c:	bf18      	it	ne
 800128e:	2301      	movne	r3, #1
 8001290:	0692      	lsls	r2, r2, #26
 8001292:	d42b      	bmi.n	80012ec <_printf_common+0xb0>
 8001294:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001298:	4649      	mov	r1, r9
 800129a:	4638      	mov	r0, r7
 800129c:	47c0      	blx	r8
 800129e:	3001      	adds	r0, #1
 80012a0:	d01e      	beq.n	80012e0 <_printf_common+0xa4>
 80012a2:	6823      	ldr	r3, [r4, #0]
 80012a4:	68e5      	ldr	r5, [r4, #12]
 80012a6:	6832      	ldr	r2, [r6, #0]
 80012a8:	f003 0306 	and.w	r3, r3, #6
 80012ac:	2b04      	cmp	r3, #4
 80012ae:	bf08      	it	eq
 80012b0:	1aad      	subeq	r5, r5, r2
 80012b2:	68a3      	ldr	r3, [r4, #8]
 80012b4:	6922      	ldr	r2, [r4, #16]
 80012b6:	bf0c      	ite	eq
 80012b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80012bc:	2500      	movne	r5, #0
 80012be:	4293      	cmp	r3, r2
 80012c0:	bfc4      	itt	gt
 80012c2:	1a9b      	subgt	r3, r3, r2
 80012c4:	18ed      	addgt	r5, r5, r3
 80012c6:	2600      	movs	r6, #0
 80012c8:	341a      	adds	r4, #26
 80012ca:	42b5      	cmp	r5, r6
 80012cc:	d11a      	bne.n	8001304 <_printf_common+0xc8>
 80012ce:	2000      	movs	r0, #0
 80012d0:	e008      	b.n	80012e4 <_printf_common+0xa8>
 80012d2:	2301      	movs	r3, #1
 80012d4:	4652      	mov	r2, sl
 80012d6:	4649      	mov	r1, r9
 80012d8:	4638      	mov	r0, r7
 80012da:	47c0      	blx	r8
 80012dc:	3001      	adds	r0, #1
 80012de:	d103      	bne.n	80012e8 <_printf_common+0xac>
 80012e0:	f04f 30ff 	mov.w	r0, #4294967295
 80012e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012e8:	3501      	adds	r5, #1
 80012ea:	e7c6      	b.n	800127a <_printf_common+0x3e>
 80012ec:	18e1      	adds	r1, r4, r3
 80012ee:	1c5a      	adds	r2, r3, #1
 80012f0:	2030      	movs	r0, #48	; 0x30
 80012f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80012f6:	4422      	add	r2, r4
 80012f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80012fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001300:	3302      	adds	r3, #2
 8001302:	e7c7      	b.n	8001294 <_printf_common+0x58>
 8001304:	2301      	movs	r3, #1
 8001306:	4622      	mov	r2, r4
 8001308:	4649      	mov	r1, r9
 800130a:	4638      	mov	r0, r7
 800130c:	47c0      	blx	r8
 800130e:	3001      	adds	r0, #1
 8001310:	d0e6      	beq.n	80012e0 <_printf_common+0xa4>
 8001312:	3601      	adds	r6, #1
 8001314:	e7d9      	b.n	80012ca <_printf_common+0x8e>
	...

08001318 <_printf_i>:
 8001318:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800131c:	460c      	mov	r4, r1
 800131e:	4691      	mov	r9, r2
 8001320:	7e27      	ldrb	r7, [r4, #24]
 8001322:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001324:	2f78      	cmp	r7, #120	; 0x78
 8001326:	4680      	mov	r8, r0
 8001328:	469a      	mov	sl, r3
 800132a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800132e:	d807      	bhi.n	8001340 <_printf_i+0x28>
 8001330:	2f62      	cmp	r7, #98	; 0x62
 8001332:	d80a      	bhi.n	800134a <_printf_i+0x32>
 8001334:	2f00      	cmp	r7, #0
 8001336:	f000 80d8 	beq.w	80014ea <_printf_i+0x1d2>
 800133a:	2f58      	cmp	r7, #88	; 0x58
 800133c:	f000 80a3 	beq.w	8001486 <_printf_i+0x16e>
 8001340:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001344:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001348:	e03a      	b.n	80013c0 <_printf_i+0xa8>
 800134a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800134e:	2b15      	cmp	r3, #21
 8001350:	d8f6      	bhi.n	8001340 <_printf_i+0x28>
 8001352:	a001      	add	r0, pc, #4	; (adr r0, 8001358 <_printf_i+0x40>)
 8001354:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001358:	080013b1 	.word	0x080013b1
 800135c:	080013c5 	.word	0x080013c5
 8001360:	08001341 	.word	0x08001341
 8001364:	08001341 	.word	0x08001341
 8001368:	08001341 	.word	0x08001341
 800136c:	08001341 	.word	0x08001341
 8001370:	080013c5 	.word	0x080013c5
 8001374:	08001341 	.word	0x08001341
 8001378:	08001341 	.word	0x08001341
 800137c:	08001341 	.word	0x08001341
 8001380:	08001341 	.word	0x08001341
 8001384:	080014d1 	.word	0x080014d1
 8001388:	080013f5 	.word	0x080013f5
 800138c:	080014b3 	.word	0x080014b3
 8001390:	08001341 	.word	0x08001341
 8001394:	08001341 	.word	0x08001341
 8001398:	080014f3 	.word	0x080014f3
 800139c:	08001341 	.word	0x08001341
 80013a0:	080013f5 	.word	0x080013f5
 80013a4:	08001341 	.word	0x08001341
 80013a8:	08001341 	.word	0x08001341
 80013ac:	080014bb 	.word	0x080014bb
 80013b0:	680b      	ldr	r3, [r1, #0]
 80013b2:	1d1a      	adds	r2, r3, #4
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	600a      	str	r2, [r1, #0]
 80013b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80013bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80013c0:	2301      	movs	r3, #1
 80013c2:	e0a3      	b.n	800150c <_printf_i+0x1f4>
 80013c4:	6825      	ldr	r5, [r4, #0]
 80013c6:	6808      	ldr	r0, [r1, #0]
 80013c8:	062e      	lsls	r6, r5, #24
 80013ca:	f100 0304 	add.w	r3, r0, #4
 80013ce:	d50a      	bpl.n	80013e6 <_printf_i+0xce>
 80013d0:	6805      	ldr	r5, [r0, #0]
 80013d2:	600b      	str	r3, [r1, #0]
 80013d4:	2d00      	cmp	r5, #0
 80013d6:	da03      	bge.n	80013e0 <_printf_i+0xc8>
 80013d8:	232d      	movs	r3, #45	; 0x2d
 80013da:	426d      	negs	r5, r5
 80013dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80013e0:	485e      	ldr	r0, [pc, #376]	; (800155c <_printf_i+0x244>)
 80013e2:	230a      	movs	r3, #10
 80013e4:	e019      	b.n	800141a <_printf_i+0x102>
 80013e6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80013ea:	6805      	ldr	r5, [r0, #0]
 80013ec:	600b      	str	r3, [r1, #0]
 80013ee:	bf18      	it	ne
 80013f0:	b22d      	sxthne	r5, r5
 80013f2:	e7ef      	b.n	80013d4 <_printf_i+0xbc>
 80013f4:	680b      	ldr	r3, [r1, #0]
 80013f6:	6825      	ldr	r5, [r4, #0]
 80013f8:	1d18      	adds	r0, r3, #4
 80013fa:	6008      	str	r0, [r1, #0]
 80013fc:	0628      	lsls	r0, r5, #24
 80013fe:	d501      	bpl.n	8001404 <_printf_i+0xec>
 8001400:	681d      	ldr	r5, [r3, #0]
 8001402:	e002      	b.n	800140a <_printf_i+0xf2>
 8001404:	0669      	lsls	r1, r5, #25
 8001406:	d5fb      	bpl.n	8001400 <_printf_i+0xe8>
 8001408:	881d      	ldrh	r5, [r3, #0]
 800140a:	4854      	ldr	r0, [pc, #336]	; (800155c <_printf_i+0x244>)
 800140c:	2f6f      	cmp	r7, #111	; 0x6f
 800140e:	bf0c      	ite	eq
 8001410:	2308      	moveq	r3, #8
 8001412:	230a      	movne	r3, #10
 8001414:	2100      	movs	r1, #0
 8001416:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800141a:	6866      	ldr	r6, [r4, #4]
 800141c:	60a6      	str	r6, [r4, #8]
 800141e:	2e00      	cmp	r6, #0
 8001420:	bfa2      	ittt	ge
 8001422:	6821      	ldrge	r1, [r4, #0]
 8001424:	f021 0104 	bicge.w	r1, r1, #4
 8001428:	6021      	strge	r1, [r4, #0]
 800142a:	b90d      	cbnz	r5, 8001430 <_printf_i+0x118>
 800142c:	2e00      	cmp	r6, #0
 800142e:	d04d      	beq.n	80014cc <_printf_i+0x1b4>
 8001430:	4616      	mov	r6, r2
 8001432:	fbb5 f1f3 	udiv	r1, r5, r3
 8001436:	fb03 5711 	mls	r7, r3, r1, r5
 800143a:	5dc7      	ldrb	r7, [r0, r7]
 800143c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001440:	462f      	mov	r7, r5
 8001442:	42bb      	cmp	r3, r7
 8001444:	460d      	mov	r5, r1
 8001446:	d9f4      	bls.n	8001432 <_printf_i+0x11a>
 8001448:	2b08      	cmp	r3, #8
 800144a:	d10b      	bne.n	8001464 <_printf_i+0x14c>
 800144c:	6823      	ldr	r3, [r4, #0]
 800144e:	07df      	lsls	r7, r3, #31
 8001450:	d508      	bpl.n	8001464 <_printf_i+0x14c>
 8001452:	6923      	ldr	r3, [r4, #16]
 8001454:	6861      	ldr	r1, [r4, #4]
 8001456:	4299      	cmp	r1, r3
 8001458:	bfde      	ittt	le
 800145a:	2330      	movle	r3, #48	; 0x30
 800145c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001460:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001464:	1b92      	subs	r2, r2, r6
 8001466:	6122      	str	r2, [r4, #16]
 8001468:	f8cd a000 	str.w	sl, [sp]
 800146c:	464b      	mov	r3, r9
 800146e:	aa03      	add	r2, sp, #12
 8001470:	4621      	mov	r1, r4
 8001472:	4640      	mov	r0, r8
 8001474:	f7ff fee2 	bl	800123c <_printf_common>
 8001478:	3001      	adds	r0, #1
 800147a:	d14c      	bne.n	8001516 <_printf_i+0x1fe>
 800147c:	f04f 30ff 	mov.w	r0, #4294967295
 8001480:	b004      	add	sp, #16
 8001482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001486:	4835      	ldr	r0, [pc, #212]	; (800155c <_printf_i+0x244>)
 8001488:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800148c:	6823      	ldr	r3, [r4, #0]
 800148e:	680e      	ldr	r6, [r1, #0]
 8001490:	061f      	lsls	r7, r3, #24
 8001492:	f856 5b04 	ldr.w	r5, [r6], #4
 8001496:	600e      	str	r6, [r1, #0]
 8001498:	d514      	bpl.n	80014c4 <_printf_i+0x1ac>
 800149a:	07d9      	lsls	r1, r3, #31
 800149c:	bf44      	itt	mi
 800149e:	f043 0320 	orrmi.w	r3, r3, #32
 80014a2:	6023      	strmi	r3, [r4, #0]
 80014a4:	b91d      	cbnz	r5, 80014ae <_printf_i+0x196>
 80014a6:	6823      	ldr	r3, [r4, #0]
 80014a8:	f023 0320 	bic.w	r3, r3, #32
 80014ac:	6023      	str	r3, [r4, #0]
 80014ae:	2310      	movs	r3, #16
 80014b0:	e7b0      	b.n	8001414 <_printf_i+0xfc>
 80014b2:	6823      	ldr	r3, [r4, #0]
 80014b4:	f043 0320 	orr.w	r3, r3, #32
 80014b8:	6023      	str	r3, [r4, #0]
 80014ba:	2378      	movs	r3, #120	; 0x78
 80014bc:	4828      	ldr	r0, [pc, #160]	; (8001560 <_printf_i+0x248>)
 80014be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80014c2:	e7e3      	b.n	800148c <_printf_i+0x174>
 80014c4:	065e      	lsls	r6, r3, #25
 80014c6:	bf48      	it	mi
 80014c8:	b2ad      	uxthmi	r5, r5
 80014ca:	e7e6      	b.n	800149a <_printf_i+0x182>
 80014cc:	4616      	mov	r6, r2
 80014ce:	e7bb      	b.n	8001448 <_printf_i+0x130>
 80014d0:	680b      	ldr	r3, [r1, #0]
 80014d2:	6826      	ldr	r6, [r4, #0]
 80014d4:	6960      	ldr	r0, [r4, #20]
 80014d6:	1d1d      	adds	r5, r3, #4
 80014d8:	600d      	str	r5, [r1, #0]
 80014da:	0635      	lsls	r5, r6, #24
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	d501      	bpl.n	80014e4 <_printf_i+0x1cc>
 80014e0:	6018      	str	r0, [r3, #0]
 80014e2:	e002      	b.n	80014ea <_printf_i+0x1d2>
 80014e4:	0671      	lsls	r1, r6, #25
 80014e6:	d5fb      	bpl.n	80014e0 <_printf_i+0x1c8>
 80014e8:	8018      	strh	r0, [r3, #0]
 80014ea:	2300      	movs	r3, #0
 80014ec:	6123      	str	r3, [r4, #16]
 80014ee:	4616      	mov	r6, r2
 80014f0:	e7ba      	b.n	8001468 <_printf_i+0x150>
 80014f2:	680b      	ldr	r3, [r1, #0]
 80014f4:	1d1a      	adds	r2, r3, #4
 80014f6:	600a      	str	r2, [r1, #0]
 80014f8:	681e      	ldr	r6, [r3, #0]
 80014fa:	6862      	ldr	r2, [r4, #4]
 80014fc:	2100      	movs	r1, #0
 80014fe:	4630      	mov	r0, r6
 8001500:	f7fe fe96 	bl	8000230 <memchr>
 8001504:	b108      	cbz	r0, 800150a <_printf_i+0x1f2>
 8001506:	1b80      	subs	r0, r0, r6
 8001508:	6060      	str	r0, [r4, #4]
 800150a:	6863      	ldr	r3, [r4, #4]
 800150c:	6123      	str	r3, [r4, #16]
 800150e:	2300      	movs	r3, #0
 8001510:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001514:	e7a8      	b.n	8001468 <_printf_i+0x150>
 8001516:	6923      	ldr	r3, [r4, #16]
 8001518:	4632      	mov	r2, r6
 800151a:	4649      	mov	r1, r9
 800151c:	4640      	mov	r0, r8
 800151e:	47d0      	blx	sl
 8001520:	3001      	adds	r0, #1
 8001522:	d0ab      	beq.n	800147c <_printf_i+0x164>
 8001524:	6823      	ldr	r3, [r4, #0]
 8001526:	079b      	lsls	r3, r3, #30
 8001528:	d413      	bmi.n	8001552 <_printf_i+0x23a>
 800152a:	68e0      	ldr	r0, [r4, #12]
 800152c:	9b03      	ldr	r3, [sp, #12]
 800152e:	4298      	cmp	r0, r3
 8001530:	bfb8      	it	lt
 8001532:	4618      	movlt	r0, r3
 8001534:	e7a4      	b.n	8001480 <_printf_i+0x168>
 8001536:	2301      	movs	r3, #1
 8001538:	4632      	mov	r2, r6
 800153a:	4649      	mov	r1, r9
 800153c:	4640      	mov	r0, r8
 800153e:	47d0      	blx	sl
 8001540:	3001      	adds	r0, #1
 8001542:	d09b      	beq.n	800147c <_printf_i+0x164>
 8001544:	3501      	adds	r5, #1
 8001546:	68e3      	ldr	r3, [r4, #12]
 8001548:	9903      	ldr	r1, [sp, #12]
 800154a:	1a5b      	subs	r3, r3, r1
 800154c:	42ab      	cmp	r3, r5
 800154e:	dcf2      	bgt.n	8001536 <_printf_i+0x21e>
 8001550:	e7eb      	b.n	800152a <_printf_i+0x212>
 8001552:	2500      	movs	r5, #0
 8001554:	f104 0619 	add.w	r6, r4, #25
 8001558:	e7f5      	b.n	8001546 <_printf_i+0x22e>
 800155a:	bf00      	nop
 800155c:	080017c5 	.word	0x080017c5
 8001560:	080017d6 	.word	0x080017d6

08001564 <_sbrk_r>:
 8001564:	b538      	push	{r3, r4, r5, lr}
 8001566:	4d06      	ldr	r5, [pc, #24]	; (8001580 <_sbrk_r+0x1c>)
 8001568:	2300      	movs	r3, #0
 800156a:	4604      	mov	r4, r0
 800156c:	4608      	mov	r0, r1
 800156e:	602b      	str	r3, [r5, #0]
 8001570:	f7fe ff6e 	bl	8000450 <_sbrk>
 8001574:	1c43      	adds	r3, r0, #1
 8001576:	d102      	bne.n	800157e <_sbrk_r+0x1a>
 8001578:	682b      	ldr	r3, [r5, #0]
 800157a:	b103      	cbz	r3, 800157e <_sbrk_r+0x1a>
 800157c:	6023      	str	r3, [r4, #0]
 800157e:	bd38      	pop	{r3, r4, r5, pc}
 8001580:	20000100 	.word	0x20000100

08001584 <__sread>:
 8001584:	b510      	push	{r4, lr}
 8001586:	460c      	mov	r4, r1
 8001588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800158c:	f000 f8a0 	bl	80016d0 <_read_r>
 8001590:	2800      	cmp	r0, #0
 8001592:	bfab      	itete	ge
 8001594:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001596:	89a3      	ldrhlt	r3, [r4, #12]
 8001598:	181b      	addge	r3, r3, r0
 800159a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800159e:	bfac      	ite	ge
 80015a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80015a2:	81a3      	strhlt	r3, [r4, #12]
 80015a4:	bd10      	pop	{r4, pc}

080015a6 <__swrite>:
 80015a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015aa:	461f      	mov	r7, r3
 80015ac:	898b      	ldrh	r3, [r1, #12]
 80015ae:	05db      	lsls	r3, r3, #23
 80015b0:	4605      	mov	r5, r0
 80015b2:	460c      	mov	r4, r1
 80015b4:	4616      	mov	r6, r2
 80015b6:	d505      	bpl.n	80015c4 <__swrite+0x1e>
 80015b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015bc:	2302      	movs	r3, #2
 80015be:	2200      	movs	r2, #0
 80015c0:	f000 f868 	bl	8001694 <_lseek_r>
 80015c4:	89a3      	ldrh	r3, [r4, #12]
 80015c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80015ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80015ce:	81a3      	strh	r3, [r4, #12]
 80015d0:	4632      	mov	r2, r6
 80015d2:	463b      	mov	r3, r7
 80015d4:	4628      	mov	r0, r5
 80015d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80015da:	f000 b817 	b.w	800160c <_write_r>

080015de <__sseek>:
 80015de:	b510      	push	{r4, lr}
 80015e0:	460c      	mov	r4, r1
 80015e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015e6:	f000 f855 	bl	8001694 <_lseek_r>
 80015ea:	1c43      	adds	r3, r0, #1
 80015ec:	89a3      	ldrh	r3, [r4, #12]
 80015ee:	bf15      	itete	ne
 80015f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80015f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80015f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80015fa:	81a3      	strheq	r3, [r4, #12]
 80015fc:	bf18      	it	ne
 80015fe:	81a3      	strhne	r3, [r4, #12]
 8001600:	bd10      	pop	{r4, pc}

08001602 <__sclose>:
 8001602:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001606:	f000 b813 	b.w	8001630 <_close_r>
	...

0800160c <_write_r>:
 800160c:	b538      	push	{r3, r4, r5, lr}
 800160e:	4d07      	ldr	r5, [pc, #28]	; (800162c <_write_r+0x20>)
 8001610:	4604      	mov	r4, r0
 8001612:	4608      	mov	r0, r1
 8001614:	4611      	mov	r1, r2
 8001616:	2200      	movs	r2, #0
 8001618:	602a      	str	r2, [r5, #0]
 800161a:	461a      	mov	r2, r3
 800161c:	f7fe fec7 	bl	80003ae <_write>
 8001620:	1c43      	adds	r3, r0, #1
 8001622:	d102      	bne.n	800162a <_write_r+0x1e>
 8001624:	682b      	ldr	r3, [r5, #0]
 8001626:	b103      	cbz	r3, 800162a <_write_r+0x1e>
 8001628:	6023      	str	r3, [r4, #0]
 800162a:	bd38      	pop	{r3, r4, r5, pc}
 800162c:	20000100 	.word	0x20000100

08001630 <_close_r>:
 8001630:	b538      	push	{r3, r4, r5, lr}
 8001632:	4d06      	ldr	r5, [pc, #24]	; (800164c <_close_r+0x1c>)
 8001634:	2300      	movs	r3, #0
 8001636:	4604      	mov	r4, r0
 8001638:	4608      	mov	r0, r1
 800163a:	602b      	str	r3, [r5, #0]
 800163c:	f7fe fed3 	bl	80003e6 <_close>
 8001640:	1c43      	adds	r3, r0, #1
 8001642:	d102      	bne.n	800164a <_close_r+0x1a>
 8001644:	682b      	ldr	r3, [r5, #0]
 8001646:	b103      	cbz	r3, 800164a <_close_r+0x1a>
 8001648:	6023      	str	r3, [r4, #0]
 800164a:	bd38      	pop	{r3, r4, r5, pc}
 800164c:	20000100 	.word	0x20000100

08001650 <_fstat_r>:
 8001650:	b538      	push	{r3, r4, r5, lr}
 8001652:	4d07      	ldr	r5, [pc, #28]	; (8001670 <_fstat_r+0x20>)
 8001654:	2300      	movs	r3, #0
 8001656:	4604      	mov	r4, r0
 8001658:	4608      	mov	r0, r1
 800165a:	4611      	mov	r1, r2
 800165c:	602b      	str	r3, [r5, #0]
 800165e:	f7fe fece 	bl	80003fe <_fstat>
 8001662:	1c43      	adds	r3, r0, #1
 8001664:	d102      	bne.n	800166c <_fstat_r+0x1c>
 8001666:	682b      	ldr	r3, [r5, #0]
 8001668:	b103      	cbz	r3, 800166c <_fstat_r+0x1c>
 800166a:	6023      	str	r3, [r4, #0]
 800166c:	bd38      	pop	{r3, r4, r5, pc}
 800166e:	bf00      	nop
 8001670:	20000100 	.word	0x20000100

08001674 <_isatty_r>:
 8001674:	b538      	push	{r3, r4, r5, lr}
 8001676:	4d06      	ldr	r5, [pc, #24]	; (8001690 <_isatty_r+0x1c>)
 8001678:	2300      	movs	r3, #0
 800167a:	4604      	mov	r4, r0
 800167c:	4608      	mov	r0, r1
 800167e:	602b      	str	r3, [r5, #0]
 8001680:	f7fe fecd 	bl	800041e <_isatty>
 8001684:	1c43      	adds	r3, r0, #1
 8001686:	d102      	bne.n	800168e <_isatty_r+0x1a>
 8001688:	682b      	ldr	r3, [r5, #0]
 800168a:	b103      	cbz	r3, 800168e <_isatty_r+0x1a>
 800168c:	6023      	str	r3, [r4, #0]
 800168e:	bd38      	pop	{r3, r4, r5, pc}
 8001690:	20000100 	.word	0x20000100

08001694 <_lseek_r>:
 8001694:	b538      	push	{r3, r4, r5, lr}
 8001696:	4d07      	ldr	r5, [pc, #28]	; (80016b4 <_lseek_r+0x20>)
 8001698:	4604      	mov	r4, r0
 800169a:	4608      	mov	r0, r1
 800169c:	4611      	mov	r1, r2
 800169e:	2200      	movs	r2, #0
 80016a0:	602a      	str	r2, [r5, #0]
 80016a2:	461a      	mov	r2, r3
 80016a4:	f7fe fec6 	bl	8000434 <_lseek>
 80016a8:	1c43      	adds	r3, r0, #1
 80016aa:	d102      	bne.n	80016b2 <_lseek_r+0x1e>
 80016ac:	682b      	ldr	r3, [r5, #0]
 80016ae:	b103      	cbz	r3, 80016b2 <_lseek_r+0x1e>
 80016b0:	6023      	str	r3, [r4, #0]
 80016b2:	bd38      	pop	{r3, r4, r5, pc}
 80016b4:	20000100 	.word	0x20000100

080016b8 <__malloc_lock>:
 80016b8:	4801      	ldr	r0, [pc, #4]	; (80016c0 <__malloc_lock+0x8>)
 80016ba:	f7ff bb55 	b.w	8000d68 <__retarget_lock_acquire_recursive>
 80016be:	bf00      	nop
 80016c0:	200000f8 	.word	0x200000f8

080016c4 <__malloc_unlock>:
 80016c4:	4801      	ldr	r0, [pc, #4]	; (80016cc <__malloc_unlock+0x8>)
 80016c6:	f7ff bb50 	b.w	8000d6a <__retarget_lock_release_recursive>
 80016ca:	bf00      	nop
 80016cc:	200000f8 	.word	0x200000f8

080016d0 <_read_r>:
 80016d0:	b538      	push	{r3, r4, r5, lr}
 80016d2:	4d07      	ldr	r5, [pc, #28]	; (80016f0 <_read_r+0x20>)
 80016d4:	4604      	mov	r4, r0
 80016d6:	4608      	mov	r0, r1
 80016d8:	4611      	mov	r1, r2
 80016da:	2200      	movs	r2, #0
 80016dc:	602a      	str	r2, [r5, #0]
 80016de:	461a      	mov	r2, r3
 80016e0:	f7fe fe48 	bl	8000374 <_read>
 80016e4:	1c43      	adds	r3, r0, #1
 80016e6:	d102      	bne.n	80016ee <_read_r+0x1e>
 80016e8:	682b      	ldr	r3, [r5, #0]
 80016ea:	b103      	cbz	r3, 80016ee <_read_r+0x1e>
 80016ec:	6023      	str	r3, [r4, #0]
 80016ee:	bd38      	pop	{r3, r4, r5, pc}
 80016f0:	20000100 	.word	0x20000100

080016f4 <_init>:
 80016f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016f6:	bf00      	nop
 80016f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016fa:	bc08      	pop	{r3}
 80016fc:	469e      	mov	lr, r3
 80016fe:	4770      	bx	lr

08001700 <_fini>:
 8001700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001702:	bf00      	nop
 8001704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001706:	bc08      	pop	{r3}
 8001708:	469e      	mov	lr, r3
 800170a:	4770      	bx	lr
